
STM32L021K4_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003028  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080030e8  080030e8  000130e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003238  08003238  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08003238  08003238  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003238  08003238  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003238  08003238  00013238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08003240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000058  08003298  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08003298  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005f72  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001966  00000000  00000000  00026035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  000279a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000062f  00000000  00000000  00028218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dba6  00000000  00000000  00028847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000792d  00000000  00000000  000363ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000472e7  00000000  00000000  0003dd1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002148  00000000  00000000  00085004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0008714c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000058 	.word	0x20000058
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030d0 	.word	0x080030d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000005c 	.word	0x2000005c
 8000104:	080030d0 	.word	0x080030d0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2201      	movs	r2, #1
 8000242:	431a      	orrs	r2, r3
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	601a      	str	r2, [r3, #0]
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}

08000250 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	6a1a      	ldr	r2, [r3, #32]
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	431a      	orrs	r2, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	621a      	str	r2, [r3, #32]
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b002      	add	sp, #8
 800026c:	bd80      	pop	{r7, pc}

0800026e <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800026e:	b580      	push	{r7, lr}
 8000270:	b082      	sub	sp, #8
 8000272:	af00      	add	r7, sp, #0
 8000274:	6078      	str	r0, [r7, #4]
 8000276:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	683a      	ldr	r2, [r7, #0]
 800027c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b002      	add	sp, #8
 8000284:	bd80      	pop	{r7, pc}

08000286 <LedStart>:
// Variable globale pour stocker la luminosité actuelle de la LED
static uint8_t brightness = 0;

// Démarre le timer
void LedStart(void)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM2);
 800028a:	2380      	movs	r3, #128	; 0x80
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	0018      	movs	r0, r3
 8000290:	f7ff ffd0 	bl	8000234 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	2101      	movs	r1, #1
 800029a:	0018      	movs	r0, r3
 800029c:	f7ff ffd8 	bl	8000250 <LL_TIM_CC_EnableChannel>
}
 80002a0:	46c0      	nop			; (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <LedSetValue>:
// Configure le rapport cyclique de la PWM entre 0 et 255
void LedSetValue(uint8_t val)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b082      	sub	sp, #8
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	0002      	movs	r2, r0
 80002ae:	1dfb      	adds	r3, r7, #7
 80002b0:	701a      	strb	r2, [r3, #0]
	LL_TIM_OC_SetCompareCH1(TIM2, val);
 80002b2:	1dfb      	adds	r3, r7, #7
 80002b4:	781a      	ldrb	r2, [r3, #0]
 80002b6:	2380      	movs	r3, #128	; 0x80
 80002b8:	05db      	lsls	r3, r3, #23
 80002ba:	0011      	movs	r1, r2
 80002bc:	0018      	movs	r0, r3
 80002be:	f7ff ffd6 	bl	800026e <LL_TIM_OC_SetCompareCH1>
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	b002      	add	sp, #8
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <LedPulse>:
// À chaque appel, cette fonction incrémente la luminosité de la LED
// Arrivé à la valeur maximale, chaque appel décrémente la LED
void LedPulse() {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
    static uint8_t direction = 1; // 1 pour incrémenter, -1 pour décrémenter

    // Incrémente ou décrémente la luminosité en fonction de la direction
    brightness += direction;
 80002d0:	4b0e      	ldr	r3, [pc, #56]	; (800030c <LedPulse+0x40>)
 80002d2:	781a      	ldrb	r2, [r3, #0]
 80002d4:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <LedPulse+0x44>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	18d3      	adds	r3, r2, r3
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	4b0b      	ldr	r3, [pc, #44]	; (800030c <LedPulse+0x40>)
 80002de:	701a      	strb	r2, [r3, #0]

    // Si la luminosité atteint la valeur maximale, change de direction
//    if (brightness >= TIM2->CNT) {
    if (brightness >= 255) {
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <LedPulse+0x40>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2bff      	cmp	r3, #255	; 0xff
 80002e6:	d102      	bne.n	80002ee <LedPulse+0x22>
        direction = -1; // Change de direction pour décrémenter
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <LedPulse+0x44>)
 80002ea:	22ff      	movs	r2, #255	; 0xff
 80002ec:	701a      	strb	r2, [r3, #0]
    }

    // Si la luminosité atteint 0, change de direction
    if (brightness <= 0) {
 80002ee:	4b07      	ldr	r3, [pc, #28]	; (800030c <LedPulse+0x40>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d102      	bne.n	80002fc <LedPulse+0x30>
        direction = 1; // Change de direction pour incrémenter
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <LedPulse+0x44>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	701a      	strb	r2, [r3, #0]
    }

    //Activation de la led
    LedSetValue(brightness);
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <LedPulse+0x40>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	0018      	movs	r0, r3
 8000302:	f7ff ffd0 	bl	80002a6 <LedSetValue>
}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000074 	.word	0x20000074
 8000310:	20000000 	.word	0x20000000

08000314 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	69db      	ldr	r3, [r3, #28]
 8000320:	2220      	movs	r2, #32
 8000322:	4013      	ands	r3, r2
 8000324:	2b20      	cmp	r3, #32
 8000326:	d101      	bne.n	800032c <LL_USART_IsActiveFlag_RXNE+0x18>
 8000328:	2301      	movs	r3, #1
 800032a:	e000      	b.n	800032e <LL_USART_IsActiveFlag_RXNE+0x1a>
 800032c:	2300      	movs	r3, #0
}
 800032e:	0018      	movs	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	b002      	add	sp, #8
 8000334:	bd80      	pop	{r7, pc}

08000336 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b082      	sub	sp, #8
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	2240      	movs	r2, #64	; 0x40
 8000344:	4013      	ands	r3, r2
 8000346:	2b40      	cmp	r3, #64	; 0x40
 8000348:	d101      	bne.n	800034e <LL_USART_IsActiveFlag_TC+0x18>
 800034a:	2301      	movs	r3, #1
 800034c:	e000      	b.n	8000350 <LL_USART_IsActiveFlag_TC+0x1a>
 800034e:	2300      	movs	r3, #0
}
 8000350:	0018      	movs	r0, r3
 8000352:	46bd      	mov	sp, r7
 8000354:	b002      	add	sp, #8
 8000356:	bd80      	pop	{r7, pc}

08000358 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	69db      	ldr	r3, [r3, #28]
 8000364:	2280      	movs	r2, #128	; 0x80
 8000366:	4013      	ands	r3, r2
 8000368:	2b80      	cmp	r3, #128	; 0x80
 800036a:	d101      	bne.n	8000370 <LL_USART_IsActiveFlag_TXE+0x18>
 800036c:	2301      	movs	r3, #1
 800036e:	e000      	b.n	8000372 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000370:	2300      	movs	r3, #0
}
 8000372:	0018      	movs	r0, r3
 8000374:	46bd      	mov	sp, r7
 8000376:	b002      	add	sp, #8
 8000378:	bd80      	pop	{r7, pc}

0800037a <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b082      	sub	sp, #8
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000386:	b2db      	uxtb	r3, r3
}
 8000388:	0018      	movs	r0, r3
 800038a:	46bd      	mov	sp, r7
 800038c:	b002      	add	sp, #8
 800038e:	bd80      	pop	{r7, pc}

08000390 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	000a      	movs	r2, r1
 800039a:	1cfb      	adds	r3, r7, #3
 800039c:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 800039e:	1cfb      	adds	r3, r7, #3
 80003a0:	781a      	ldrb	r2, [r3, #0]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b002      	add	sp, #8
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <SerialTransmit>:
 */

#include "Serial.h"

// Fonction pour transmettre des données sur le port série
uint8_t SerialTransmit(char *pData, uint16_t Size) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	000a      	movs	r2, r1
 80003ba:	1cbb      	adds	r3, r7, #2
 80003bc:	801a      	strh	r2, [r3, #0]
    while (Size--) {
 80003be:	e00f      	b.n	80003e0 <SerialTransmit+0x30>
        // Attente de l'envoi du caractère précédent
        while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SerialTransmit+0x58>)
 80003c4:	0018      	movs	r0, r3
 80003c6:	f7ff ffc7 	bl	8000358 <LL_USART_IsActiveFlag_TXE>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d0f9      	beq.n	80003c2 <SerialTransmit+0x12>
        // Transmission du caractère
        LL_USART_TransmitData8(USART2, *pData++);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	1c5a      	adds	r2, r3, #1
 80003d2:	607a      	str	r2, [r7, #4]
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <SerialTransmit+0x58>)
 80003d8:	0019      	movs	r1, r3
 80003da:	0010      	movs	r0, r2
 80003dc:	f7ff ffd8 	bl	8000390 <LL_USART_TransmitData8>
    while (Size--) {
 80003e0:	1cbb      	adds	r3, r7, #2
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	1cba      	adds	r2, r7, #2
 80003e6:	1e59      	subs	r1, r3, #1
 80003e8:	8011      	strh	r1, [r2, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d1e8      	bne.n	80003c0 <SerialTransmit+0x10>
    }
    // Attente de la fin de la transmission
    while (!LL_USART_IsActiveFlag_TC(USART2)) {}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <SerialTransmit+0x58>)
 80003f2:	0018      	movs	r0, r3
 80003f4:	f7ff ff9f 	bl	8000336 <LL_USART_IsActiveFlag_TC>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d0f9      	beq.n	80003f0 <SerialTransmit+0x40>
    return 0; // Retourne 0 pour indiquer que la transmission a réussi
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	0018      	movs	r0, r3
 8000400:	46bd      	mov	sp, r7
 8000402:	b002      	add	sp, #8
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	40004400 	.word	0x40004400

0800040c <SerialReceiveChar>:

// Fonction pour recevoir un caractère sur le port série
char SerialReceiveChar(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
    // Attente de la réception d'un caractère
    while (!LL_USART_IsActiveFlag_RXNE(USART2)) {}
 8000410:	46c0      	nop			; (mov r8, r8)
 8000412:	4b07      	ldr	r3, [pc, #28]	; (8000430 <SerialReceiveChar+0x24>)
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff7d 	bl	8000314 <LL_USART_IsActiveFlag_RXNE>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d0f9      	beq.n	8000412 <SerialReceiveChar+0x6>
    // Lecture du caractère reçu
    return (char)LL_USART_ReceiveData8(USART2);
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <SerialReceiveChar+0x24>)
 8000420:	0018      	movs	r0, r3
 8000422:	f7ff ffaa 	bl	800037a <LL_USART_ReceiveData8>
 8000426:	0003      	movs	r3, r0
}
 8000428:	0018      	movs	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	40004400 	.word	0x40004400

08000434 <shHelp>:

#include "Shell.h"
#include <stdio.h>


int shHelp(hShell_t * hShell, int argc, char ** argv) {
 8000434:	b5b0      	push	{r4, r5, r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af02      	add	r7, sp, #8
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
	int i;

	uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\nThe following commands are available:\r\n");
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	4a29      	ldr	r2, [pc, #164]	; (80004e8 <shHelp+0xb4>)
 8000444:	4694      	mov	ip, r2
 8000446:	4463      	add	r3, ip
 8000448:	4a28      	ldr	r2, [pc, #160]	; (80004ec <shHelp+0xb8>)
 800044a:	212a      	movs	r1, #42	; 0x2a
 800044c:	0018      	movs	r0, r3
 800044e:	f002 f985 	bl	800275c <sniprintf>
 8000452:	0002      	movs	r2, r0
 8000454:	2112      	movs	r1, #18
 8000456:	187b      	adds	r3, r7, r1
 8000458:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 800045a:	68fa      	ldr	r2, [r7, #12]
 800045c:	238e      	movs	r3, #142	; 0x8e
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	58d3      	ldr	r3, [r2, r3]
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	4820      	ldr	r0, [pc, #128]	; (80004e8 <shHelp+0xb4>)
 8000466:	1810      	adds	r0, r2, r0
 8000468:	187a      	adds	r2, r7, r1
 800046a:	8812      	ldrh	r2, [r2, #0]
 800046c:	0011      	movs	r1, r2
 800046e:	4798      	blx	r3

	for(i = 0 ; i < hShell->funcListSize ; i++) {
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]
 8000474:	e02c      	b.n	80004d0 <shHelp+0x9c>
		uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\t%c - %s\r\n", hShell->funcList[i].c, hShell->funcList[i].description);
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	4d1b      	ldr	r5, [pc, #108]	; (80004e8 <shHelp+0xb4>)
 800047a:	1958      	adds	r0, r3, r5
 800047c:	68f9      	ldr	r1, [r7, #12]
 800047e:	697a      	ldr	r2, [r7, #20]
 8000480:	0013      	movs	r3, r2
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	189b      	adds	r3, r3, r2
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	18cb      	adds	r3, r1, r3
 800048a:	3304      	adds	r3, #4
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	001c      	movs	r4, r3
 8000490:	68f9      	ldr	r1, [r7, #12]
 8000492:	697a      	ldr	r2, [r7, #20]
 8000494:	0013      	movs	r3, r2
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	189b      	adds	r3, r3, r2
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	18cb      	adds	r3, r1, r3
 800049e:	330c      	adds	r3, #12
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a13      	ldr	r2, [pc, #76]	; (80004f0 <shHelp+0xbc>)
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	0023      	movs	r3, r4
 80004a8:	212a      	movs	r1, #42	; 0x2a
 80004aa:	f002 f957 	bl	800275c <sniprintf>
 80004ae:	0002      	movs	r2, r0
 80004b0:	2110      	movs	r1, #16
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	801a      	strh	r2, [r3, #0]
		hShell->transmitCb(hShell->printBuffer, size);
 80004b6:	68fa      	ldr	r2, [r7, #12]
 80004b8:	238e      	movs	r3, #142	; 0x8e
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	58d3      	ldr	r3, [r2, r3]
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	1950      	adds	r0, r2, r5
 80004c2:	187a      	adds	r2, r7, r1
 80004c4:	8812      	ldrh	r2, [r2, #0]
 80004c6:	0011      	movs	r1, r2
 80004c8:	4798      	blx	r3
	for(i = 0 ; i < hShell->funcListSize ; i++) {
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	3301      	adds	r3, #1
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	001a      	movs	r2, r3
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	4293      	cmp	r3, r2
 80004da:	dbcc      	blt.n	8000476 <shHelp+0x42>
	}

	return 0;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	0018      	movs	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b006      	add	sp, #24
 80004e4:	bdb0      	pop	{r4, r5, r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	0000020e 	.word	0x0000020e
 80004ec:	080030e8 	.word	0x080030e8
 80004f0:	08003114 	.word	0x08003114

080004f4 <isChar>:

uint8_t isChar(char c) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	0002      	movs	r2, r0
 80004fc:	1dfb      	adds	r3, r7, #7
 80004fe:	701a      	strb	r2, [r3, #0]
	if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c == '+') || (c == '-')) {
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b40      	cmp	r3, #64	; 0x40
 8000506:	d903      	bls.n	8000510 <isChar+0x1c>
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b5a      	cmp	r3, #90	; 0x5a
 800050e:	d917      	bls.n	8000540 <isChar+0x4c>
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b60      	cmp	r3, #96	; 0x60
 8000516:	d903      	bls.n	8000520 <isChar+0x2c>
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b7a      	cmp	r3, #122	; 0x7a
 800051e:	d90f      	bls.n	8000540 <isChar+0x4c>
 8000520:	1dfb      	adds	r3, r7, #7
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b2f      	cmp	r3, #47	; 0x2f
 8000526:	d903      	bls.n	8000530 <isChar+0x3c>
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b39      	cmp	r3, #57	; 0x39
 800052e:	d907      	bls.n	8000540 <isChar+0x4c>
 8000530:	1dfb      	adds	r3, r7, #7
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b2b      	cmp	r3, #43	; 0x2b
 8000536:	d003      	beq.n	8000540 <isChar+0x4c>
 8000538:	1dfb      	adds	r3, r7, #7
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b2d      	cmp	r3, #45	; 0x2d
 800053e:	d101      	bne.n	8000544 <isChar+0x50>
		return 1;
 8000540:	2301      	movs	r3, #1
 8000542:	e000      	b.n	8000546 <isChar+0x52>
	}
	else {
		return 0;
 8000544:	2300      	movs	r3, #0
	}
}
 8000546:	0018      	movs	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	b002      	add	sp, #8
 800054c:	bd80      	pop	{r7, pc}

0800054e <isSpace>:

uint8_t isSpace(char c) {
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	0002      	movs	r2, r0
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	701a      	strb	r2, [r3, #0]
	if (c == ' ') {
 800055a:	1dfb      	adds	r3, r7, #7
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b20      	cmp	r3, #32
 8000560:	d101      	bne.n	8000566 <isSpace+0x18>
		return 1;
 8000562:	2301      	movs	r3, #1
 8000564:	e000      	b.n	8000568 <isSpace+0x1a>
	}
	else {
		return 0;
 8000566:	2300      	movs	r3, #0
	}
}
 8000568:	0018      	movs	r0, r3
 800056a:	46bd      	mov	sp, r7
 800056c:	b002      	add	sp, #8
 800056e:	bd80      	pop	{r7, pc}

08000570 <ShellInit>:
 *
 * @param hShell      Shell handle
 * @param transmitCb  Function to be called when character has to be called
 * @retval Status (0 if successful)
 */
uint8_t ShellInit(hShell_t * hShell, ShellTransmitCb_t transmitCb) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	if (hShell == NULL) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d101      	bne.n	8000584 <ShellInit+0x14>
		return 255;
 8000580:	23ff      	movs	r3, #255	; 0xff
 8000582:	e037      	b.n	80005f4 <ShellInit+0x84>
	}

	hShell->funcListSize = 0;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb = transmitCb;
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	238e      	movs	r3, #142	; 0x8e
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	6839      	ldr	r1, [r7, #0]
 8000592:	50d1      	str	r1, [r2, r3]
	hShell->cmdLinePosition = 0;
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	238f      	movs	r3, #143	; 0x8f
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	2100      	movs	r1, #0
 800059c:	52d1      	strh	r1, [r2, r3]
	hShell->arrowPending = 0;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a16      	ldr	r2, [pc, #88]	; (80005fc <ShellInit+0x8c>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	5499      	strb	r1, [r3, r2]

	uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.4 =====\r\n");
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a15      	ldr	r2, [pc, #84]	; (8000600 <ShellInit+0x90>)
 80005aa:	4694      	mov	ip, r2
 80005ac:	4463      	add	r3, ip
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <ShellInit+0x94>)
 80005b0:	212a      	movs	r1, #42	; 0x2a
 80005b2:	0018      	movs	r0, r3
 80005b4:	f002 f8d2 	bl	800275c <sniprintf>
 80005b8:	0002      	movs	r2, r0
 80005ba:	210e      	movs	r1, #14
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	238e      	movs	r3, #142	; 0x8e
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	58d3      	ldr	r3, [r2, r3]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <ShellInit+0x90>)
 80005cc:	1810      	adds	r0, r2, r0
 80005ce:	187a      	adds	r2, r7, r1
 80005d0:	8812      	ldrh	r2, [r2, #0]
 80005d2:	0011      	movs	r1, r2
 80005d4:	4798      	blx	r3

	ShellAdd(hShell, 'h', shHelp, "Displays this help message");
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <ShellInit+0x98>)
 80005d8:	4a0c      	ldr	r2, [pc, #48]	; (800060c <ShellInit+0x9c>)
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	2168      	movs	r1, #104	; 0x68
 80005de:	f000 f819 	bl	8000614 <ShellAdd>

	hShell->transmitCb("\r\n> ", 4);
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	238e      	movs	r3, #142	; 0x8e
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	58d3      	ldr	r3, [r2, r3]
 80005ea:	4a09      	ldr	r2, [pc, #36]	; (8000610 <ShellInit+0xa0>)
 80005ec:	2104      	movs	r1, #4
 80005ee:	0010      	movs	r0, r2
 80005f0:	4798      	blx	r3

	return 0;
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	0018      	movs	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b004      	add	sp, #16
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	0000023e 	.word	0x0000023e
 8000600:	0000020e 	.word	0x0000020e
 8000604:	08003120 	.word	0x08003120
 8000608:	08003148 	.word	0x08003148
 800060c:	08000435 	.word	0x08000435
 8000610:	08003164 	.word	0x08003164

08000614 <ShellAdd>:

uint8_t ShellAdd(hShell_t * hShell, char c, ShellFuncPtr_t pFunc, char * description) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	607a      	str	r2, [r7, #4]
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	200b      	movs	r0, #11
 8000622:	183b      	adds	r3, r7, r0
 8000624:	1c0a      	adds	r2, r1, #0
 8000626:	701a      	strb	r2, [r3, #0]
	if (!isChar(c)) {
 8000628:	183b      	adds	r3, r7, r0
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	0018      	movs	r0, r3
 800062e:	f7ff ff61 	bl	80004f4 <isChar>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d101      	bne.n	800063a <ShellAdd+0x26>
		return 255;
 8000636:	23ff      	movs	r3, #255	; 0xff
 8000638:	e032      	b.n	80006a0 <ShellAdd+0x8c>
	}

	if (hShell->funcListSize < _SHELL_FUNC_LIST_MAX_SIZE) {
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	2b27      	cmp	r3, #39	; 0x27
 8000640:	d82d      	bhi.n	800069e <ShellAdd+0x8a>
		hShell->funcList[hShell->funcListSize].c = c;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	0019      	movs	r1, r3
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	000b      	movs	r3, r1
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	185b      	adds	r3, r3, r1
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	18d3      	adds	r3, r2, r3
 8000654:	3304      	adds	r3, #4
 8000656:	220b      	movs	r2, #11
 8000658:	18ba      	adds	r2, r7, r2
 800065a:	7812      	ldrb	r2, [r2, #0]
 800065c:	701a      	strb	r2, [r3, #0]
		hShell->funcList[hShell->funcListSize].func = pFunc;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	0019      	movs	r1, r3
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	000b      	movs	r3, r1
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	185b      	adds	r3, r3, r1
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	18d3      	adds	r3, r2, r3
 8000670:	3308      	adds	r3, #8
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	601a      	str	r2, [r3, #0]
		hShell->funcList[hShell->funcListSize].description = description;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	0019      	movs	r1, r3
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	000b      	movs	r3, r1
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	185b      	adds	r3, r3, r1
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	18d3      	adds	r3, r2, r3
 8000688:	330c      	adds	r3, #12
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	601a      	str	r2, [r3, #0]
		hShell->funcListSize++;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	b29a      	uxth	r2, r3
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	801a      	strh	r2, [r3, #0]
		return 0;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <ShellAdd+0x8c>
	}

	return 255;
 800069e:	23ff      	movs	r3, #255	; 0xff
}
 80006a0:	0018      	movs	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b004      	add	sp, #16
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <ShellExec>:

uint8_t ShellExec(hShell_t * hShell) {
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b09f      	sub	sp, #124	; 0x7c
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	6078      	str	r0, [r7, #4]
	int argc;
	char * argv[_ARGV_SIZE];

	char * cmdLine = hShell->cmdLineBuffer;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	33e5      	adds	r3, #229	; 0xe5
 80006b4:	33ff      	adds	r3, #255	; 0xff
 80006b6:	667b      	str	r3, [r7, #100]	; 0x64

	for(uint16_t i = 0 ; i < hShell->funcListSize ; i++) {
 80006b8:	236a      	movs	r3, #106	; 0x6a
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	2200      	movs	r2, #0
 80006be:	801a      	strh	r2, [r3, #0]
 80006c0:	e0ae      	b.n	8000820 <ShellExec+0x178>
		if (hShell->funcList[i].c == cmdLine[0]) {
 80006c2:	236a      	movs	r3, #106	; 0x6a
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	881a      	ldrh	r2, [r3, #0]
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	0013      	movs	r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	189b      	adds	r3, r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	18cb      	adds	r3, r1, r3
 80006d4:	3304      	adds	r3, #4
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d000      	beq.n	80006e2 <ShellExec+0x3a>
 80006e0:	e098      	b.n	8000814 <ShellExec+0x16c>
			argc = 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	66fb      	str	r3, [r7, #108]	; 0x6c
			argv[0] = cmdLine;
 80006e6:	2308      	movs	r3, #8
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80006ec:	601a      	str	r2, [r3, #0]

			// Replacing the spaces with '\0' to be usable by the called function
			for(uint16_t i = 0 ; (i < hShell->cmdLinePosition && argc < _ARGV_SIZE) ; i++){
 80006ee:	2368      	movs	r3, #104	; 0x68
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	2200      	movs	r2, #0
 80006f4:	801a      	strh	r2, [r3, #0]
 80006f6:	e037      	b.n	8000768 <ShellExec+0xc0>
				if(cmdLine[i] == ' ') {
 80006f8:	2068      	movs	r0, #104	; 0x68
 80006fa:	183b      	adds	r3, r7, r0
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000700:	18d3      	adds	r3, r2, r3
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b20      	cmp	r3, #32
 8000706:	d129      	bne.n	800075c <ShellExec+0xb4>
					cmdLine[i] = '\0';
 8000708:	183b      	adds	r3, r7, r0
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]

					uint16_t next = i+1;
 8000714:	2160      	movs	r1, #96	; 0x60
 8000716:	187b      	adds	r3, r7, r1
 8000718:	183a      	adds	r2, r7, r0
 800071a:	8812      	ldrh	r2, [r2, #0]
 800071c:	3201      	adds	r2, #1
 800071e:	801a      	strh	r2, [r3, #0]
					if (next < hShell->cmdLinePosition && (isChar(cmdLine[next]))) {
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	238f      	movs	r3, #143	; 0x8f
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	5ad3      	ldrh	r3, [r2, r3]
 8000728:	187a      	adds	r2, r7, r1
 800072a:	8812      	ldrh	r2, [r2, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	d215      	bcs.n	800075c <ShellExec+0xb4>
 8000730:	000c      	movs	r4, r1
 8000732:	187b      	adds	r3, r7, r1
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000738:	18d3      	adds	r3, r2, r3
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff fed9 	bl	80004f4 <isChar>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d00a      	beq.n	800075c <ShellExec+0xb4>
						argv[argc++] = &(cmdLine[next]);
 8000746:	193b      	adds	r3, r7, r4
 8000748:	881a      	ldrh	r2, [r3, #0]
 800074a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800074c:	1c59      	adds	r1, r3, #1
 800074e:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000750:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000752:	1889      	adds	r1, r1, r2
 8000754:	2208      	movs	r2, #8
 8000756:	18ba      	adds	r2, r7, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	5099      	str	r1, [r3, r2]
			for(uint16_t i = 0 ; (i < hShell->cmdLinePosition && argc < _ARGV_SIZE) ; i++){
 800075c:	2168      	movs	r1, #104	; 0x68
 800075e:	187b      	adds	r3, r7, r1
 8000760:	881a      	ldrh	r2, [r3, #0]
 8000762:	187b      	adds	r3, r7, r1
 8000764:	3201      	adds	r2, #1
 8000766:	801a      	strh	r2, [r3, #0]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	238f      	movs	r3, #143	; 0x8f
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	5ad3      	ldrh	r3, [r2, r3]
 8000770:	2268      	movs	r2, #104	; 0x68
 8000772:	18ba      	adds	r2, r7, r2
 8000774:	8812      	ldrh	r2, [r2, #0]
 8000776:	429a      	cmp	r2, r3
 8000778:	d202      	bcs.n	8000780 <ShellExec+0xd8>
 800077a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800077c:	2b13      	cmp	r3, #19
 800077e:	ddbb      	ble.n	80006f8 <ShellExec+0x50>
					}
				}
			}

			// Actual call of the function
			int ret = hShell->funcList[i].func(hShell, argc, argv);
 8000780:	236a      	movs	r3, #106	; 0x6a
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	881a      	ldrh	r2, [r3, #0]
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	0013      	movs	r3, r2
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	189b      	adds	r3, r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	18cb      	adds	r3, r1, r3
 8000792:	3308      	adds	r3, #8
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2208      	movs	r2, #8
 8000798:	18ba      	adds	r2, r7, r2
 800079a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	4798      	blx	r3
 80007a0:	0003      	movs	r3, r0
 80007a2:	65fb      	str	r3, [r7, #92]	; 0x5c

			// Error display
			if (ret == 0) {
 80007a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d117      	bne.n	80007da <ShellExec+0x132>
				uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\n%c returned successfully\r\n", cmdLine[0]);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4c2e      	ldr	r4, [pc, #184]	; (8000868 <ShellExec+0x1c0>)
 80007ae:	1918      	adds	r0, r3, r4
 80007b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4a2d      	ldr	r2, [pc, #180]	; (800086c <ShellExec+0x1c4>)
 80007b6:	212a      	movs	r1, #42	; 0x2a
 80007b8:	f001 ffd0 	bl	800275c <sniprintf>
 80007bc:	0002      	movs	r2, r0
 80007be:	2158      	movs	r1, #88	; 0x58
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	801a      	strh	r2, [r3, #0]
				hShell->transmitCb(hShell->printBuffer, size);
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	238e      	movs	r3, #142	; 0x8e
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	58d3      	ldr	r3, [r2, r3]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	1910      	adds	r0, r2, r4
 80007d0:	187a      	adds	r2, r7, r1
 80007d2:	8812      	ldrh	r2, [r2, #0]
 80007d4:	0011      	movs	r1, r2
 80007d6:	4798      	blx	r3
 80007d8:	e01a      	b.n	8000810 <ShellExec+0x168>
			}
			else {
				uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\n%c returned with error code %d\r\n", cmdLine[0], ret);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4c22      	ldr	r4, [pc, #136]	; (8000868 <ShellExec+0x1c0>)
 80007de:	1918      	adds	r0, r3, r4
 80007e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	0019      	movs	r1, r3
 80007e6:	4a22      	ldr	r2, [pc, #136]	; (8000870 <ShellExec+0x1c8>)
 80007e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	000b      	movs	r3, r1
 80007ee:	212a      	movs	r1, #42	; 0x2a
 80007f0:	f001 ffb4 	bl	800275c <sniprintf>
 80007f4:	0002      	movs	r2, r0
 80007f6:	215a      	movs	r1, #90	; 0x5a
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	801a      	strh	r2, [r3, #0]
				hShell->transmitCb(hShell->printBuffer, size);
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	238e      	movs	r3, #142	; 0x8e
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	58d3      	ldr	r3, [r2, r3]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	1910      	adds	r0, r2, r4
 8000808:	187a      	adds	r2, r7, r1
 800080a:	8812      	ldrh	r2, [r2, #0]
 800080c:	0011      	movs	r1, r2
 800080e:	4798      	blx	r3
			}

			return 0;
 8000810:	2300      	movs	r3, #0
 8000812:	e025      	b.n	8000860 <ShellExec+0x1b8>
	for(uint16_t i = 0 ; i < hShell->funcListSize ; i++) {
 8000814:	216a      	movs	r1, #106	; 0x6a
 8000816:	187b      	adds	r3, r7, r1
 8000818:	881a      	ldrh	r2, [r3, #0]
 800081a:	187b      	adds	r3, r7, r1
 800081c:	3201      	adds	r2, #1
 800081e:	801a      	strh	r2, [r3, #0]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	226a      	movs	r2, #106	; 0x6a
 8000826:	18ba      	adds	r2, r7, r2
 8000828:	8812      	ldrh	r2, [r2, #0]
 800082a:	429a      	cmp	r2, r3
 800082c:	d200      	bcs.n	8000830 <ShellExec+0x188>
 800082e:	e748      	b.n	80006c2 <ShellExec+0x1a>
		}
	}

	uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\n%c: no such command\r\n", cmdLine[0]);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4c0d      	ldr	r4, [pc, #52]	; (8000868 <ShellExec+0x1c0>)
 8000834:	1918      	adds	r0, r3, r4
 8000836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <ShellExec+0x1cc>)
 800083c:	212a      	movs	r1, #42	; 0x2a
 800083e:	f001 ff8d 	bl	800275c <sniprintf>
 8000842:	0002      	movs	r2, r0
 8000844:	2162      	movs	r1, #98	; 0x62
 8000846:	187b      	adds	r3, r7, r1
 8000848:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	238e      	movs	r3, #142	; 0x8e
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	58d3      	ldr	r3, [r2, r3]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	1910      	adds	r0, r2, r4
 8000856:	187a      	adds	r2, r7, r1
 8000858:	8812      	ldrh	r2, [r2, #0]
 800085a:	0011      	movs	r1, r2
 800085c:	4798      	blx	r3

	return 255;
 800085e:	23ff      	movs	r3, #255	; 0xff
}
 8000860:	0018      	movs	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	b01d      	add	sp, #116	; 0x74
 8000866:	bd90      	pop	{r4, r7, pc}
 8000868:	0000020e 	.word	0x0000020e
 800086c:	0800316c 	.word	0x0800316c
 8000870:	0800318c 	.word	0x0800318c
 8000874:	080031b0 	.word	0x080031b0

08000878 <ShellProcess>:

uint8_t ShellProcess(hShell_t * hShell, char c) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	000a      	movs	r2, r1
 8000882:	1cfb      	adds	r3, r7, #3
 8000884:	701a      	strb	r2, [r3, #0]
	if (hShell->arrowPending == 0) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a71      	ldr	r2, [pc, #452]	; (8000a50 <ShellProcess+0x1d8>)
 800088a:	5c9b      	ldrb	r3, [r3, r2]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d000      	beq.n	8000892 <ShellProcess+0x1a>
 8000890:	e0a7      	b.n	80009e2 <ShellProcess+0x16a>
		if (c == '\r') {
 8000892:	1cfb      	adds	r3, r7, #3
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b0d      	cmp	r3, #13
 8000898:	d13b      	bne.n	8000912 <ShellProcess+0x9a>
			hShell->transmitCb("\r\n:", 3);
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	238e      	movs	r3, #142	; 0x8e
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	58d3      	ldr	r3, [r2, r3]
 80008a2:	4a6c      	ldr	r2, [pc, #432]	; (8000a54 <ShellProcess+0x1dc>)
 80008a4:	2103      	movs	r1, #3
 80008a6:	0010      	movs	r0, r2
 80008a8:	4798      	blx	r3
			hShell->transmitCb(hShell->cmdLineBuffer, hShell->cmdLinePosition);
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	238e      	movs	r3, #142	; 0x8e
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	58d3      	ldr	r3, [r2, r3]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	32e5      	adds	r2, #229	; 0xe5
 80008b6:	32ff      	adds	r2, #255	; 0xff
 80008b8:	0010      	movs	r0, r2
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	228f      	movs	r2, #143	; 0x8f
 80008be:	0092      	lsls	r2, r2, #2
 80008c0:	5a8a      	ldrh	r2, [r1, r2]
 80008c2:	0011      	movs	r1, r2
 80008c4:	4798      	blx	r3
			hShell->transmitCb("\r\n", 2);
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	238e      	movs	r3, #142	; 0x8e
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	58d3      	ldr	r3, [r2, r3]
 80008ce:	4a62      	ldr	r2, [pc, #392]	; (8000a58 <ShellProcess+0x1e0>)
 80008d0:	2102      	movs	r1, #2
 80008d2:	0010      	movs	r0, r2
 80008d4:	4798      	blx	r3

			// Add zero char to be used with newlib functions
			hShell->cmdLineBuffer[hShell->cmdLinePosition] = '\0';
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	238f      	movs	r3, #143	; 0x8f
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	5ad3      	ldrh	r3, [r2, r3]
 80008de:	0019      	movs	r1, r3
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	23f2      	movs	r3, #242	; 0xf2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	1852      	adds	r2, r2, r1
 80008e8:	18d3      	adds	r3, r2, r3
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]

			ShellExec(hShell);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff fed9 	bl	80006a8 <ShellExec>

			hShell->cmdLinePosition = 0;            //reset buffer
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	238f      	movs	r3, #143	; 0x8f
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	2100      	movs	r1, #0
 80008fe:	52d1      	strh	r1, [r2, r3]

			hShell->transmitCb("\r\n> ", 4);
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	238e      	movs	r3, #142	; 0x8e
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	58d3      	ldr	r3, [r2, r3]
 8000908:	4a54      	ldr	r2, [pc, #336]	; (8000a5c <ShellProcess+0x1e4>)
 800090a:	2104      	movs	r1, #4
 800090c:	0010      	movs	r0, r2
 800090e:	4798      	blx	r3
 8000910:	e098      	b.n	8000a44 <ShellProcess+0x1cc>
		}
		else if (c == '\b') {
 8000912:	1cfb      	adds	r3, r7, #3
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b08      	cmp	r3, #8
 8000918:	d125      	bne.n	8000966 <ShellProcess+0xee>
			if (hShell->cmdLinePosition > 0) {      //is there a char to delete?
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	238f      	movs	r3, #143	; 0x8f
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	5ad3      	ldrh	r3, [r2, r3]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d100      	bne.n	8000928 <ShellProcess+0xb0>
 8000926:	e08d      	b.n	8000a44 <ShellProcess+0x1cc>
				hShell->cmdLinePosition--;          //remove it in buffer
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	238f      	movs	r3, #143	; 0x8f
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	5ad3      	ldrh	r3, [r2, r3]
 8000930:	3b01      	subs	r3, #1
 8000932:	b299      	uxth	r1, r3
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	238f      	movs	r3, #143	; 0x8f
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	52d1      	strh	r1, [r2, r3]
				hShell->cmdLineBuffer[hShell->cmdLinePosition] = '\0'; //store
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	238f      	movs	r3, #143	; 0x8f
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	5ad3      	ldrh	r3, [r2, r3]
 8000944:	0019      	movs	r1, r3
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	23f2      	movs	r3, #242	; 0xf2
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	1852      	adds	r2, r2, r1
 800094e:	18d3      	adds	r3, r2, r3
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]

				hShell->transmitCb("\b \b", 3);
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	238e      	movs	r3, #142	; 0x8e
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	58d3      	ldr	r3, [r2, r3]
 800095c:	4a40      	ldr	r2, [pc, #256]	; (8000a60 <ShellProcess+0x1e8>)
 800095e:	2103      	movs	r1, #3
 8000960:	0010      	movs	r0, r2
 8000962:	4798      	blx	r3
 8000964:	e06e      	b.n	8000a44 <ShellProcess+0x1cc>
			}
		}
		else if (isChar(c) || isSpace(c)) {
 8000966:	1cfb      	adds	r3, r7, #3
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	0018      	movs	r0, r3
 800096c:	f7ff fdc2 	bl	80004f4 <isChar>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d106      	bne.n	8000982 <ShellProcess+0x10a>
 8000974:	1cfb      	adds	r3, r7, #3
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff fde8 	bl	800054e <isSpace>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d022      	beq.n	80009c8 <ShellProcess+0x150>
			//only store characters if buffer has space
			if (hShell->cmdLinePosition < _COMMAND_LINE_SIZE) {
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	238f      	movs	r3, #143	; 0x8f
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	5ad3      	ldrh	r3, [r2, r3]
 800098a:	2b29      	cmp	r3, #41	; 0x29
 800098c:	d85a      	bhi.n	8000a44 <ShellProcess+0x1cc>
				hShell->transmitCb((&c), 1);
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	238e      	movs	r3, #142	; 0x8e
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	58d3      	ldr	r3, [r2, r3]
 8000996:	1cfa      	adds	r2, r7, #3
 8000998:	2101      	movs	r1, #1
 800099a:	0010      	movs	r0, r2
 800099c:	4798      	blx	r3
				hShell->cmdLineBuffer[hShell->cmdLinePosition++] = c; //store
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	238f      	movs	r3, #143	; 0x8f
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	5ad3      	ldrh	r3, [r2, r3]
 80009a6:	1c5a      	adds	r2, r3, #1
 80009a8:	b290      	uxth	r0, r2
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	228f      	movs	r2, #143	; 0x8f
 80009ae:	0092      	lsls	r2, r2, #2
 80009b0:	5288      	strh	r0, [r1, r2]
 80009b2:	0018      	movs	r0, r3
 80009b4:	1cfb      	adds	r3, r7, #3
 80009b6:	7819      	ldrb	r1, [r3, #0]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	23f2      	movs	r3, #242	; 0xf2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	1812      	adds	r2, r2, r0
 80009c0:	18d3      	adds	r3, r2, r3
 80009c2:	1c0a      	adds	r2, r1, #0
 80009c4:	701a      	strb	r2, [r3, #0]
			if (hShell->cmdLinePosition < _COMMAND_LINE_SIZE) {
 80009c6:	e03d      	b.n	8000a44 <ShellProcess+0x1cc>
			}
		}
		else if (c == _ARROW_FIRST) {
 80009c8:	1cfb      	adds	r3, r7, #3
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b1b      	cmp	r3, #27
 80009ce:	d139      	bne.n	8000a44 <ShellProcess+0x1cc>
			hShell->arrowPending++;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <ShellProcess+0x1d8>)
 80009d4:	5c9b      	ldrb	r3, [r3, r2]
 80009d6:	3301      	adds	r3, #1
 80009d8:	b2d9      	uxtb	r1, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <ShellProcess+0x1d8>)
 80009de:	5499      	strb	r1, [r3, r2]
 80009e0:	e030      	b.n	8000a44 <ShellProcess+0x1cc>
//			hShell->cmdLinePosition = 0;            //reset buffer
//			hShell->transmitCb("\r\n> ", 4);
//		}
	}
	else {
		if (hShell->arrowPending == 1) {
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a1a      	ldr	r2, [pc, #104]	; (8000a50 <ShellProcess+0x1d8>)
 80009e6:	5c9b      	ldrb	r3, [r3, r2]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d10c      	bne.n	8000a06 <ShellProcess+0x18e>
			if (c == _ARROW_SECOND) {
 80009ec:	1cfb      	adds	r3, r7, #3
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b5b      	cmp	r3, #91	; 0x5b
 80009f2:	d127      	bne.n	8000a44 <ShellProcess+0x1cc>
				hShell->arrowPending++;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <ShellProcess+0x1d8>)
 80009f8:	5c9b      	ldrb	r3, [r3, r2]
 80009fa:	3301      	adds	r3, #1
 80009fc:	b2d9      	uxtb	r1, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <ShellProcess+0x1d8>)
 8000a02:	5499      	strb	r1, [r3, r2]
 8000a04:	e01e      	b.n	8000a44 <ShellProcess+0x1cc>
			}
		}
		else if (hShell->arrowPending == 2) {
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <ShellProcess+0x1d8>)
 8000a0a:	5c9b      	ldrb	r3, [r3, r2]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d119      	bne.n	8000a44 <ShellProcess+0x1cc>
			switch (c) {
 8000a10:	1cfb      	adds	r3, r7, #3
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b44      	cmp	r3, #68	; 0x44
 8000a16:	d008      	beq.n	8000a2a <ShellProcess+0x1b2>
 8000a18:	dc09      	bgt.n	8000a2e <ShellProcess+0x1b6>
 8000a1a:	2b43      	cmp	r3, #67	; 0x43
 8000a1c:	d009      	beq.n	8000a32 <ShellProcess+0x1ba>
 8000a1e:	dc06      	bgt.n	8000a2e <ShellProcess+0x1b6>
 8000a20:	2b41      	cmp	r3, #65	; 0x41
 8000a22:	d008      	beq.n	8000a36 <ShellProcess+0x1be>
 8000a24:	2b42      	cmp	r3, #66	; 0x42
 8000a26:	d008      	beq.n	8000a3a <ShellProcess+0x1c2>
			case _ARROW_THIRD_RIGHT:
				break;
			case _ARROW_THIRD_LEFT:
				break;
			default:
				break;
 8000a28:	e001      	b.n	8000a2e <ShellProcess+0x1b6>
				break;
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	e006      	b.n	8000a3c <ShellProcess+0x1c4>
				break;
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	e004      	b.n	8000a3c <ShellProcess+0x1c4>
				break;
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	e002      	b.n	8000a3c <ShellProcess+0x1c4>
				break;
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	e000      	b.n	8000a3c <ShellProcess+0x1c4>
				break;
 8000a3a:	46c0      	nop			; (mov r8, r8)
			}

			hShell->arrowPending = 0;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <ShellProcess+0x1d8>)
 8000a40:	2100      	movs	r1, #0
 8000a42:	5499      	strb	r1, [r3, r2]

		}
	}

	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	0018      	movs	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	0000023e 	.word	0x0000023e
 8000a54:	080031c8 	.word	0x080031c8
 8000a58:	080031cc 	.word	0x080031cc
 8000a5c:	08003164 	.word	0x08003164
 8000a60:	080031d0 	.word	0x080031d0

08000a64 <LL_TIM_EnableCounter>:
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2201      	movs	r2, #1
 8000a72:	431a      	orrs	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b002      	add	sp, #8
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	60da      	str	r2, [r3, #12]
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <TimeBaseStartIT>:

#include "TimeBase.h"

//start tim2 ch2
void TimeBaseStartIT(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_UPDATE(TIM21);
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <TimeBaseStartIT+0x1c>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff ffec 	bl	8000a80 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM21);
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <TimeBaseStartIT+0x1c>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff ffda 	bl	8000a64 <LL_TIM_EnableCounter>
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	40010800 	.word	0x40010800

08000abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	0002      	movs	r2, r0
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ace:	d809      	bhi.n	8000ae4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	231f      	movs	r3, #31
 8000ad8:	401a      	ands	r2, r3
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <__NVIC_EnableIRQ+0x30>)
 8000adc:	2101      	movs	r1, #1
 8000ade:	4091      	lsls	r1, r2
 8000ae0:	000a      	movs	r2, r1
 8000ae2:	601a      	str	r2, [r3, #0]
  }
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	0002      	movs	r2, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b7f      	cmp	r3, #127	; 0x7f
 8000b04:	d828      	bhi.n	8000b58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b06:	4a2f      	ldr	r2, [pc, #188]	; (8000bc4 <__NVIC_SetPriority+0xd4>)
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	33c0      	adds	r3, #192	; 0xc0
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	589b      	ldr	r3, [r3, r2]
 8000b16:	1dfa      	adds	r2, r7, #7
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	400a      	ands	r2, r1
 8000b20:	00d2      	lsls	r2, r2, #3
 8000b22:	21ff      	movs	r1, #255	; 0xff
 8000b24:	4091      	lsls	r1, r2
 8000b26:	000a      	movs	r2, r1
 8000b28:	43d2      	mvns	r2, r2
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	019b      	lsls	r3, r3, #6
 8000b32:	22ff      	movs	r2, #255	; 0xff
 8000b34:	401a      	ands	r2, r3
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	4003      	ands	r3, r0
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <__NVIC_SetPriority+0xd4>)
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	089b      	lsrs	r3, r3, #2
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	33c0      	adds	r3, #192	; 0xc0
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b56:	e031      	b.n	8000bbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b58:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <__NVIC_SetPriority+0xd8>)
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	0019      	movs	r1, r3
 8000b60:	230f      	movs	r3, #15
 8000b62:	400b      	ands	r3, r1
 8000b64:	3b08      	subs	r3, #8
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	3306      	adds	r3, #6
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	18d3      	adds	r3, r2, r3
 8000b6e:	3304      	adds	r3, #4
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	1dfa      	adds	r2, r7, #7
 8000b74:	7812      	ldrb	r2, [r2, #0]
 8000b76:	0011      	movs	r1, r2
 8000b78:	2203      	movs	r2, #3
 8000b7a:	400a      	ands	r2, r1
 8000b7c:	00d2      	lsls	r2, r2, #3
 8000b7e:	21ff      	movs	r1, #255	; 0xff
 8000b80:	4091      	lsls	r1, r2
 8000b82:	000a      	movs	r2, r1
 8000b84:	43d2      	mvns	r2, r2
 8000b86:	401a      	ands	r2, r3
 8000b88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	019b      	lsls	r3, r3, #6
 8000b8e:	22ff      	movs	r2, #255	; 0xff
 8000b90:	401a      	ands	r2, r3
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	0018      	movs	r0, r3
 8000b98:	2303      	movs	r3, #3
 8000b9a:	4003      	ands	r3, r0
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <__NVIC_SetPriority+0xd8>)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	001c      	movs	r4, r3
 8000ba8:	230f      	movs	r3, #15
 8000baa:	4023      	ands	r3, r4
 8000bac:	3b08      	subs	r3, #8
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	3306      	adds	r3, #6
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	18c3      	adds	r3, r0, r3
 8000bb8:	3304      	adds	r3, #4
 8000bba:	601a      	str	r2, [r3, #0]
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b003      	add	sp, #12
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonFrequencyMode)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <LL_ADC_SetCommonFrequencyMode+0x24>)
 8000bdc:	401a      	ands	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	431a      	orrs	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	601a      	str	r2, [r3, #0]
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	fdffffff 	.word	0xfdffffff

08000bf4 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	2207      	movs	r2, #7
 8000c04:	4393      	bics	r3, r2
 8000c06:	001a      	movs	r2, r3
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	615a      	str	r2, [r3, #20]
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b002      	add	sp, #8
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	2204      	movs	r2, #4
 8000c28:	4393      	bics	r3, r2
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	60da      	str	r2, [r3, #12]
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <LL_ADC_REG_SetSequencerChAdd>:
  *
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	035b      	lsls	r3, r3, #13
 8000c4e:	0b5b      	lsrs	r3, r3, #13
 8000c50:	431a      	orrs	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4393      	bics	r3, r2
 8000c70:	001a      	movs	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	611a      	str	r2, [r3, #16]
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <LL_ADC_EnableInternalRegulator+0x24>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	2280      	movs	r2, #128	; 0x80
 8000c96:	0552      	lsls	r2, r2, #21
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b002      	add	sp, #8
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	6fffffe8 	.word	0x6fffffe8

08000cac <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2204      	movs	r2, #4
 8000cba:	4393      	bics	r3, r2
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	605a      	str	r2, [r3, #4]
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	4393      	bics	r3, r2
 8000cda:	001a      	movs	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	605a      	str	r2, [r3, #4]
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <LL_RCC_HSI_Enable+0x18>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <LL_RCC_HSI_Enable+0x18>)
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	40021000 	.word	0x40021000

08000d04 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <LL_RCC_HSI_IsReady+0x1c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	4013      	ands	r3, r2
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d101      	bne.n	8000d18 <LL_RCC_HSI_IsReady+0x14>
 8000d14:	2301      	movs	r3, #1
 8000d16:	e000      	b.n	8000d1a <LL_RCC_HSI_IsReady+0x16>
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40021000 	.word	0x40021000

08000d24 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	0019      	movs	r1, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	021a      	lsls	r2, r3, #8
 8000d3a:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	605a      	str	r2, [r3, #4]
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	ffffe0ff 	.word	0xffffe0ff

08000d50 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <LL_RCC_SetSysClkSource+0x24>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	4393      	bics	r3, r2
 8000d60:	0019      	movs	r1, r3
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <LL_RCC_SetSysClkSource+0x24>)
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	430a      	orrs	r2, r1
 8000d68:	60da      	str	r2, [r3, #12]
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40021000 	.word	0x40021000

08000d78 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <LL_RCC_GetSysClkSource+0x14>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	220c      	movs	r2, #12
 8000d82:	4013      	ands	r3, r2
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	40021000 	.word	0x40021000

08000d90 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	22f0      	movs	r2, #240	; 0xf0
 8000d9e:	4393      	bics	r3, r2
 8000da0:	0019      	movs	r1, r3
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	60da      	str	r2, [r3, #12]
}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b002      	add	sp, #8
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	40021000 	.word	0x40021000

08000db8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	0019      	movs	r1, r3
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	60da      	str	r2, [r3, #12]
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	fffff8ff 	.word	0xfffff8ff

08000de4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <LL_RCC_SetAPB2Prescaler+0x28>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	0019      	movs	r1, r3
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	60da      	str	r2, [r3, #12]
}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b002      	add	sp, #8
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	ffffc7ff 	.word	0xffffc7ff

08000e10 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <LL_RCC_SetUSARTClockSource+0x2c>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	0c12      	lsrs	r2, r2, #16
 8000e20:	43d2      	mvns	r2, r2
 8000e22:	401a      	ands	r2, r3
 8000e24:	0011      	movs	r1, r2
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	041b      	lsls	r3, r3, #16
 8000e2a:	0c1a      	lsrs	r2, r3, #16
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <LL_RCC_SetUSARTClockSource+0x2c>)
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	40021000 	.word	0x40021000

08000e40 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <LL_RCC_PLL_Enable+0x18>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <LL_RCC_PLL_Enable+0x18>)
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	0449      	lsls	r1, r1, #17
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000

08000e5c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <LL_RCC_PLL_IsReady+0x24>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	049b      	lsls	r3, r3, #18
 8000e68:	401a      	ands	r2, r3
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	049b      	lsls	r3, r3, #18
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d101      	bne.n	8000e76 <LL_RCC_PLL_IsReady+0x1a>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <LL_RCC_PLL_IsReady+0x1c>
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	40021000 	.word	0x40021000

08000e84 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <LL_RCC_PLL_ConfigDomain_SYS+0x34>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	0019      	movs	r1, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	60da      	str	r2, [r3, #12]
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b004      	add	sp, #16
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	ff02ffff 	.word	0xff02ffff

08000ebc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ec6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b004      	add	sp, #16
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <LL_APB2_GRP1_EnableClock+0x28>)
 8000ef2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <LL_APB2_GRP1_EnableClock+0x28>)
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <LL_APB2_GRP1_EnableClock+0x28>)
 8000efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4013      	ands	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b004      	add	sp, #16
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40021000 	.word	0x40021000

08000f14 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <LL_IOP_GRP1_EnableClock+0x28>)
 8000f1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <LL_IOP_GRP1_EnableClock+0x28>)
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <LL_IOP_GRP1_EnableClock+0x28>)
 8000f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b004      	add	sp, #16
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000

08000f40 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <LL_FLASH_SetLatency+0x24>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4393      	bics	r3, r2
 8000f50:	0019      	movs	r1, r3
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <LL_FLASH_SetLatency+0x24>)
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	40022000 	.word	0x40022000

08000f68 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <LL_FLASH_GetLatency+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4013      	ands	r3, r2
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	40022000 	.word	0x40022000

08000f80 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000f8e:	4013      	ands	r3, r2
 8000f90:	0019      	movs	r1, r3
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	40007000 	.word	0x40007000
 8000fa8:	ffffe7ff 	.word	0xffffe7ff

08000fac <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOSF       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <LL_PWR_IsActiveFlag_VOS+0x1c>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2210      	movs	r2, #16
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	3b10      	subs	r3, #16
 8000fba:	425a      	negs	r2, r3
 8000fbc:	4153      	adcs	r3, r2
 8000fbe:	b2db      	uxtb	r3, r3
}
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	40007000 	.word	0x40007000

08000fcc <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2210      	movs	r2, #16
 8000fdc:	4393      	bics	r3, r2
 8000fde:	001a      	movs	r2, r3
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	605a      	str	r2, [r3, #4]
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b002      	add	sp, #8
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <LL_TIM_DisableARRPreload>:
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	4393      	bics	r3, r2
 8001000:	001a      	movs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	601a      	str	r2, [r3, #0]
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <LL_TIM_OC_DisableFast>:
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d00d      	beq.n	800103c <LL_TIM_OC_DisableFast+0x2c>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b10      	cmp	r3, #16
 8001024:	d008      	beq.n	8001038 <LL_TIM_OC_DisableFast+0x28>
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	429a      	cmp	r2, r3
 800102e:	d101      	bne.n	8001034 <LL_TIM_OC_DisableFast+0x24>
 8001030:	2304      	movs	r3, #4
 8001032:	e004      	b.n	800103e <LL_TIM_OC_DisableFast+0x2e>
 8001034:	2306      	movs	r3, #6
 8001036:	e002      	b.n	800103e <LL_TIM_OC_DisableFast+0x2e>
 8001038:	2302      	movs	r3, #2
 800103a:	e000      	b.n	800103e <LL_TIM_OC_DisableFast+0x2e>
 800103c:	2300      	movs	r3, #0
 800103e:	200f      	movs	r0, #15
 8001040:	183a      	adds	r2, r7, r0
 8001042:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3318      	adds	r3, #24
 8001048:	0019      	movs	r1, r3
 800104a:	183b      	adds	r3, r7, r0
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LL_TIM_OC_DisableFast+0x68>)
 8001050:	5cd3      	ldrb	r3, [r2, r3]
 8001052:	18cb      	adds	r3, r1, r3
 8001054:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	183a      	adds	r2, r7, r0
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	4907      	ldr	r1, [pc, #28]	; (800107c <LL_TIM_OC_DisableFast+0x6c>)
 8001060:	5c8a      	ldrb	r2, [r1, r2]
 8001062:	0011      	movs	r1, r2
 8001064:	2204      	movs	r2, #4
 8001066:	408a      	lsls	r2, r1
 8001068:	43d2      	mvns	r2, r2
 800106a:	401a      	ands	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	601a      	str	r2, [r3, #0]
}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b004      	add	sp, #16
 8001076:	bd80      	pop	{r7, pc}
 8001078:	080031d4 	.word	0x080031d4
 800107c:	080031dc 	.word	0x080031dc

08001080 <LL_TIM_OC_EnablePreload>:
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d00d      	beq.n	80010ac <LL_TIM_OC_EnablePreload+0x2c>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b10      	cmp	r3, #16
 8001094:	d008      	beq.n	80010a8 <LL_TIM_OC_EnablePreload+0x28>
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	429a      	cmp	r2, r3
 800109e:	d101      	bne.n	80010a4 <LL_TIM_OC_EnablePreload+0x24>
 80010a0:	2304      	movs	r3, #4
 80010a2:	e004      	b.n	80010ae <LL_TIM_OC_EnablePreload+0x2e>
 80010a4:	2306      	movs	r3, #6
 80010a6:	e002      	b.n	80010ae <LL_TIM_OC_EnablePreload+0x2e>
 80010a8:	2302      	movs	r3, #2
 80010aa:	e000      	b.n	80010ae <LL_TIM_OC_EnablePreload+0x2e>
 80010ac:	2300      	movs	r3, #0
 80010ae:	200f      	movs	r0, #15
 80010b0:	183a      	adds	r2, r7, r0
 80010b2:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3318      	adds	r3, #24
 80010b8:	0019      	movs	r1, r3
 80010ba:	183b      	adds	r3, r7, r0
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <LL_TIM_OC_EnablePreload+0x68>)
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	18cb      	adds	r3, r1, r3
 80010c4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	183b      	adds	r3, r7, r0
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4907      	ldr	r1, [pc, #28]	; (80010ec <LL_TIM_OC_EnablePreload+0x6c>)
 80010d0:	5ccb      	ldrb	r3, [r1, r3]
 80010d2:	0019      	movs	r1, r3
 80010d4:	2308      	movs	r3, #8
 80010d6:	408b      	lsls	r3, r1
 80010d8:	431a      	orrs	r2, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	601a      	str	r2, [r3, #0]
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b004      	add	sp, #16
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	080031d4 	.word	0x080031d4
 80010ec:	080031dc 	.word	0x080031dc

080010f0 <LL_TIM_SetClockSource>:
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <LL_TIM_SetClockSource+0x24>)
 8001100:	401a      	ands	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	609a      	str	r2, [r3, #8]
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	ffffbff8 	.word	0xffffbff8

08001118 <LL_TIM_SetTriggerOutput>:
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2270      	movs	r2, #112	; 0x70
 8001128:	4393      	bics	r3, r2
 800112a:	001a      	movs	r2, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	431a      	orrs	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	605a      	str	r2, [r3, #4]
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b002      	add	sp, #8
 800113a:	bd80      	pop	{r7, pc}

0800113c <LL_TIM_DisableMasterSlaveMode>:
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	4393      	bics	r3, r2
 800114c:	001a      	movs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	609a      	str	r2, [r3, #8]
}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b002      	add	sp, #8
 8001158:	bd80      	pop	{r7, pc}

0800115a <LL_USART_Enable>:
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2201      	movs	r2, #1
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	601a      	str	r2, [r3, #0]
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b002      	add	sp, #8
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <LL_USART_ConfigAsyncMode>:
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <LL_USART_ConfigAsyncMode+0x2c>)
 8001186:	401a      	ands	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	222a      	movs	r2, #42	; 0x2a
 8001192:	4393      	bics	r3, r2
 8001194:	001a      	movs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	609a      	str	r2, [r3, #8]
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	ffffb7ff 	.word	0xffffb7ff

080011a8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b002      	add	sp, #8
 80011be:	bd80      	pop	{r7, pc}

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	4c1b      	ldr	r4, [pc, #108]	; (8001230 <main+0x70>)
 80011c4:	44a5      	add	sp, r4
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff fe8d 	bl	8000ee8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	055b      	lsls	r3, r3, #21
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff fe72 	bl	8000ebc <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 80011d8:	2301      	movs	r3, #1
 80011da:	425b      	negs	r3, r3
 80011dc:	2103      	movs	r1, #3
 80011de:	0018      	movs	r0, r3
 80011e0:	f7ff fc86 	bl	8000af0 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e4:	f000 f82a 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f000 fae6 	bl	80017b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011ec:	f000 fa6c 	bl	80016c8 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80011f0:	f000 f87a 	bl	80012e8 <MX_ADC_Init>
  MX_SPI1_Init();
 80011f4:	f000 f922 	bl	800143c <MX_SPI1_Init>
  MX_TIM2_Init();
 80011f8:	f000 f99e 	bl	8001538 <MX_TIM2_Init>
  MX_TIM21_Init();
 80011fc:	f000 fa24 	bl	8001648 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  LedStart();
 8001200:	f7ff f841 	bl	8000286 <LedStart>
  TimeBaseStartIT();
 8001204:	f7ff fc4a 	bl	8000a9c <TimeBaseStartIT>

  hShell_t hShell;

  ShellInit(&hShell, &SerialTransmit);
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <main+0x74>)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	0011      	movs	r1, r2
 800120e:	0018      	movs	r0, r3
 8001210:	f7ff f9ae 	bl	8000570 <ShellInit>
    /* USER CODE END WHILE */
//	LedPulse();
//	LL_mDelay(1);
//	ShellInit(&hShell, &SerialTransmit);

	char c = SerialReceiveChar();
 8001214:	4d08      	ldr	r5, [pc, #32]	; (8001238 <main+0x78>)
 8001216:	197c      	adds	r4, r7, r5
 8001218:	f7ff f8f8 	bl	800040c <SerialReceiveChar>
 800121c:	0003      	movs	r3, r0
 800121e:	7023      	strb	r3, [r4, #0]
	ShellProcess(&hShell, c);
 8001220:	197b      	adds	r3, r7, r5
 8001222:	781a      	ldrb	r2, [r3, #0]
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	0011      	movs	r1, r2
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff fb25 	bl	8000878 <ShellProcess>
  {
 800122e:	e7f1      	b.n	8001214 <main+0x54>
 8001230:	fffffdb8 	.word	0xfffffdb8
 8001234:	080003b1 	.word	0x080003b1
 8001238:	00000247 	.word	0x00000247

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001240:	2001      	movs	r0, #1
 8001242:	f7ff fe7d 	bl	8000f40 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	f7ff fe8e 	bl	8000f68 <LL_FLASH_GetLatency>
 800124c:	0003      	movs	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d1fa      	bne.n	8001248 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	0018      	movs	r0, r3
 8001258:	f7ff fe92 	bl	8000f80 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	f7ff fea5 	bl	8000fac <LL_PWR_IsActiveFlag_VOS>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d1fb      	bne.n	800125e <SystemClock_Config+0x22>
  {
  }
  LL_RCC_HSI_Enable();
 8001266:	f7ff fd3f 	bl	8000ce8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	f7ff fd4a 	bl	8000d04 <LL_RCC_HSI_IsReady>
 8001270:	0003      	movs	r3, r0
 8001272:	2b01      	cmp	r3, #1
 8001274:	d1fa      	bne.n	800126c <SystemClock_Config+0x30>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001276:	2010      	movs	r0, #16
 8001278:	f7ff fd54 	bl	8000d24 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_4, LL_RCC_PLL_DIV_2);
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	03da      	lsls	r2, r3, #15
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	02db      	lsls	r3, r3, #11
 8001284:	0019      	movs	r1, r3
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fdfc 	bl	8000e84 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800128c:	f7ff fdd8 	bl	8000e40 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	f7ff fde3 	bl	8000e5c <LL_RCC_PLL_IsReady>
 8001296:	0003      	movs	r3, r0
 8001298:	2b01      	cmp	r3, #1
 800129a:	d1fa      	bne.n	8001292 <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fd77 	bl	8000d90 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fd88 	bl	8000db8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fd9b 	bl	8000de4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80012ae:	2003      	movs	r0, #3
 80012b0:	f7ff fd4e 	bl	8000d50 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	f7ff fd5f 	bl	8000d78 <LL_RCC_GetSysClkSource>
 80012ba:	0003      	movs	r3, r0
 80012bc:	2b0c      	cmp	r3, #12
 80012be:	d1fa      	bne.n	80012b6 <SystemClock_Config+0x7a>
  {

  }

  LL_Init1msTick(32000000);
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <SystemClock_Config+0xa4>)
 80012c2:	0018      	movs	r0, r3
 80012c4:	f001 fa2c 	bl	8002720 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SystemClock_Config+0xa4>)
 80012ca:	0018      	movs	r0, r3
 80012cc:	f001 fa38 	bl	8002740 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_SYSCLK);
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SystemClock_Config+0xa8>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff fd9c 	bl	8000e10 <LL_RCC_SetUSARTClockSource>
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	01e84800 	.word	0x01e84800
 80012e4:	000c0004 	.word	0x000c0004

080012e8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	b090      	sub	sp, #64	; 0x40
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80012ee:	2428      	movs	r4, #40	; 0x28
 80012f0:	193b      	adds	r3, r7, r4
 80012f2:	0018      	movs	r0, r3
 80012f4:	2314      	movs	r3, #20
 80012f6:	001a      	movs	r2, r3
 80012f8:	2100      	movs	r1, #0
 80012fa:	f001 fa63 	bl	80027c4 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80012fe:	2518      	movs	r5, #24
 8001300:	197b      	adds	r3, r7, r5
 8001302:	0018      	movs	r0, r3
 8001304:	2310      	movs	r3, #16
 8001306:	001a      	movs	r2, r3
 8001308:	2100      	movs	r1, #0
 800130a:	f001 fa5b 	bl	80027c4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	003b      	movs	r3, r7
 8001310:	0018      	movs	r0, r3
 8001312:	2318      	movs	r3, #24
 8001314:	001a      	movs	r2, r3
 8001316:	2100      	movs	r1, #0
 8001318:	f001 fa54 	bl	80027c4 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff fde1 	bl	8000ee8 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001326:	2001      	movs	r0, #1
 8001328:	f7ff fdf4 	bl	8000f14 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA1   ------> ADC_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800132c:	003b      	movs	r3, r7
 800132e:	2202      	movs	r2, #2
 8001330:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001332:	003b      	movs	r3, r7
 8001334:	2203      	movs	r2, #3
 8001336:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001338:	003b      	movs	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	003a      	movs	r2, r7
 8001340:	23a0      	movs	r3, #160	; 0xa0
 8001342:	05db      	lsls	r3, r3, #23
 8001344:	0011      	movs	r1, r2
 8001346:	0018      	movs	r0, r3
 8001348:	f000 fc75 	bl	8001c36 <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_1);
 800134c:	4a36      	ldr	r2, [pc, #216]	; (8001428 <MX_ADC_Init+0x140>)
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <MX_ADC_Init+0x144>)
 8001350:	0011      	movs	r1, r2
 8001352:	0018      	movs	r0, r3
 8001354:	f7ff fc72 	bl	8000c3c <LL_ADC_REG_SetSequencerChAdd>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001358:	0021      	movs	r1, r4
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001360:	187b      	adds	r3, r7, r1
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001366:	187b      	adds	r3, r7, r1
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800136c:	187b      	adds	r3, r7, r1
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001372:	187b      	adds	r3, r7, r1
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001378:	187b      	adds	r3, r7, r1
 800137a:	4a2c      	ldr	r2, [pc, #176]	; (800142c <MX_ADC_Init+0x144>)
 800137c:	0019      	movs	r1, r3
 800137e:	0010      	movs	r0, r2
 8001380:	f000 fb6e 	bl	8001a60 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <MX_ADC_Init+0x144>)
 8001386:	2100      	movs	r1, #0
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff fc33 	bl	8000bf4 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <MX_ADC_Init+0x144>)
 8001390:	2100      	movs	r1, #0
 8001392:	0018      	movs	r0, r3
 8001394:	f7ff fc63 	bl	8000c5e <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <MX_ADC_Init+0x144>)
 800139a:	2100      	movs	r1, #0
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff fc3b 	bl	8000c18 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_HIGH);
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <MX_ADC_Init+0x148>)
 80013a4:	2100      	movs	r1, #0
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7ff fc10 	bl	8000bcc <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_ADC_Init+0x144>)
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7ff fc7c 	bl	8000cac <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_ADC_Init+0x144>)
 80013b6:	0018      	movs	r0, r3
 80013b8:	f7ff fc87 	bl	8000cca <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80013bc:	197b      	adds	r3, r7, r5
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	05d2      	lsls	r2, r2, #23
 80013c2:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80013c4:	197b      	adds	r3, r7, r5
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80013ca:	197b      	adds	r3, r7, r5
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80013d0:	197b      	adds	r3, r7, r5
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80013d6:	197b      	adds	r3, r7, r5
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <MX_ADC_Init+0x144>)
 80013da:	0019      	movs	r1, r3
 80013dc:	0010      	movs	r0, r2
 80013de:	f000 fb09 	bl	80019f4 <LL_ADC_Init>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_ADC_Init+0x144>)
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff fc4d 	bl	8000c84 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <MX_ADC_Init+0x14c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4912      	ldr	r1, [pc, #72]	; (8001438 <MX_ADC_Init+0x150>)
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7fe fe93 	bl	800011c <__udivsi3>
 80013f6:	0003      	movs	r3, r0
 80013f8:	001a      	movs	r2, r3
 80013fa:	0013      	movs	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	189b      	adds	r3, r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	210a      	movs	r1, #10
 8001404:	0018      	movs	r0, r3
 8001406:	f7fe fe89 	bl	800011c <__udivsi3>
 800140a:	0003      	movs	r3, r0
 800140c:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 800140e:	e002      	b.n	8001416 <MX_ADC_Init+0x12e>
  {
    wait_loop_index--;
 8001410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001412:	3b01      	subs	r3, #1
 8001414:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f9      	bne.n	8001410 <MX_ADC_Init+0x128>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b010      	add	sp, #64	; 0x40
 8001424:	bdb0      	pop	{r4, r5, r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	04000002 	.word	0x04000002
 800142c:	40012400 	.word	0x40012400
 8001430:	40012708 	.word	0x40012708
 8001434:	20000004 	.word	0x20000004
 8001438:	00030d40 	.word	0x00030d40

0800143c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b091      	sub	sp, #68	; 0x44
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001442:	2418      	movs	r4, #24
 8001444:	193b      	adds	r3, r7, r4
 8001446:	0018      	movs	r0, r3
 8001448:	2328      	movs	r3, #40	; 0x28
 800144a:	001a      	movs	r2, r3
 800144c:	2100      	movs	r1, #0
 800144e:	f001 f9b9 	bl	80027c4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	003b      	movs	r3, r7
 8001454:	0018      	movs	r0, r3
 8001456:	2318      	movs	r3, #24
 8001458:	001a      	movs	r2, r3
 800145a:	2100      	movs	r1, #0
 800145c:	f001 f9b2 	bl	80027c4 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	015b      	lsls	r3, r3, #5
 8001464:	0018      	movs	r0, r3
 8001466:	f7ff fd3f 	bl	8000ee8 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff fd52 	bl	8000f14 <LL_IOP_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001470:	003b      	movs	r3, r7
 8001472:	2220      	movs	r2, #32
 8001474:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001476:	003b      	movs	r3, r7
 8001478:	2202      	movs	r2, #2
 800147a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	003b      	movs	r3, r7
 800147e:	2203      	movs	r2, #3
 8001480:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001482:	003b      	movs	r3, r7
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001488:	003b      	movs	r3, r7
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800148e:	003b      	movs	r3, r7
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	003a      	movs	r2, r7
 8001496:	23a0      	movs	r3, #160	; 0xa0
 8001498:	05db      	lsls	r3, r3, #23
 800149a:	0011      	movs	r1, r2
 800149c:	0018      	movs	r0, r3
 800149e:	f000 fbca 	bl	8001c36 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80014a2:	003b      	movs	r3, r7
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014a8:	003b      	movs	r3, r7
 80014aa:	2202      	movs	r2, #2
 80014ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	003b      	movs	r3, r7
 80014b0:	2203      	movs	r2, #3
 80014b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014b4:	003b      	movs	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014ba:	003b      	movs	r3, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80014c0:	003b      	movs	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	003a      	movs	r2, r7
 80014c8:	23a0      	movs	r3, #160	; 0xa0
 80014ca:	05db      	lsls	r3, r3, #23
 80014cc:	0011      	movs	r1, r2
 80014ce:	0018      	movs	r0, r3
 80014d0:	f000 fbb1 	bl	8001c36 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80014d4:	193b      	adds	r3, r7, r4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80014da:	193b      	adds	r3, r7, r4
 80014dc:	2282      	movs	r2, #130	; 0x82
 80014de:	0052      	lsls	r2, r2, #1
 80014e0:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80014e2:	0021      	movs	r1, r4
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	2280      	movs	r2, #128	; 0x80
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800150a:	187b      	adds	r3, r7, r1
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 8001510:	187b      	adds	r3, r7, r1
 8001512:	2207      	movs	r2, #7
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001516:	187b      	adds	r3, r7, r1
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <MX_SPI1_Init+0xf8>)
 800151a:	0019      	movs	r1, r3
 800151c:	0010      	movs	r0, r2
 800151e:	f000 fd9f 	bl	8002060 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <MX_SPI1_Init+0xf8>)
 8001524:	2100      	movs	r1, #0
 8001526:	0018      	movs	r0, r3
 8001528:	f7ff fd50 	bl	8000fcc <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b011      	add	sp, #68	; 0x44
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	40013000 	.word	0x40013000

08001538 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b08e      	sub	sp, #56	; 0x38
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800153e:	2428      	movs	r4, #40	; 0x28
 8001540:	193b      	adds	r3, r7, r4
 8001542:	0018      	movs	r0, r3
 8001544:	2310      	movs	r3, #16
 8001546:	001a      	movs	r2, r3
 8001548:	2100      	movs	r1, #0
 800154a:	f001 f93b 	bl	80027c4 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800154e:	2518      	movs	r5, #24
 8001550:	197b      	adds	r3, r7, r5
 8001552:	0018      	movs	r0, r3
 8001554:	2310      	movs	r3, #16
 8001556:	001a      	movs	r2, r3
 8001558:	2100      	movs	r1, #0
 800155a:	f001 f933 	bl	80027c4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	003b      	movs	r3, r7
 8001560:	0018      	movs	r0, r3
 8001562:	2318      	movs	r3, #24
 8001564:	001a      	movs	r2, r3
 8001566:	2100      	movs	r1, #0
 8001568:	f001 f92c 	bl	80027c4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800156c:	2001      	movs	r0, #1
 800156e:	f7ff fca5 	bl	8000ebc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 124;
 8001572:	193b      	adds	r3, r7, r4
 8001574:	227c      	movs	r2, #124	; 0x7c
 8001576:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001578:	193b      	adds	r3, r7, r4
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 255;
 800157e:	193b      	adds	r3, r7, r4
 8001580:	22ff      	movs	r2, #255	; 0xff
 8001582:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001584:	193b      	adds	r3, r7, r4
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800158a:	193a      	adds	r2, r7, r4
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	05db      	lsls	r3, r3, #23
 8001590:	0011      	movs	r1, r2
 8001592:	0018      	movs	r0, r3
 8001594:	f000 fe10 	bl	80021b8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	05db      	lsls	r3, r3, #23
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff fd27 	bl	8000ff0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	05db      	lsls	r3, r3, #23
 80015a6:	2100      	movs	r1, #0
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff fda1 	bl	80010f0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	05db      	lsls	r3, r3, #23
 80015b2:	2101      	movs	r1, #1
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff fd63 	bl	8001080 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80015ba:	0029      	movs	r1, r5
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	2260      	movs	r2, #96	; 0x60
 80015c0:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80015d4:	187a      	adds	r2, r7, r1
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	05db      	lsls	r3, r3, #23
 80015da:	2101      	movs	r1, #1
 80015dc:	0018      	movs	r0, r3
 80015de:	f000 fe33 	bl	8002248 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	05db      	lsls	r3, r3, #23
 80015e6:	2101      	movs	r1, #1
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff fd11 	bl	8001010 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	05db      	lsls	r3, r3, #23
 80015f2:	2100      	movs	r1, #0
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7ff fd8f 	bl	8001118 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	05db      	lsls	r3, r3, #23
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff fd9c 	bl	800113c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff fc85 	bl	8000f14 <LL_IOP_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA8   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800160a:	003b      	movs	r3, r7
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	0052      	lsls	r2, r2, #1
 8001610:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001612:	003b      	movs	r3, r7
 8001614:	2202      	movs	r2, #2
 8001616:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001618:	003b      	movs	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800161e:	003b      	movs	r3, r7
 8001620:	2200      	movs	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001624:	003b      	movs	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800162a:	003b      	movs	r3, r7
 800162c:	2205      	movs	r2, #5
 800162e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	003a      	movs	r2, r7
 8001632:	23a0      	movs	r3, #160	; 0xa0
 8001634:	05db      	lsls	r3, r3, #23
 8001636:	0011      	movs	r1, r2
 8001638:	0018      	movs	r0, r3
 800163a:	f000 fafc 	bl	8001c36 <LL_GPIO_Init>

}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b00e      	add	sp, #56	; 0x38
 8001644:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001648 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800164e:	003b      	movs	r3, r7
 8001650:	0018      	movs	r0, r3
 8001652:	2310      	movs	r3, #16
 8001654:	001a      	movs	r2, r3
 8001656:	2100      	movs	r1, #0
 8001658:	f001 f8b4 	bl	80027c4 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM21);
 800165c:	2004      	movs	r0, #4
 800165e:	f7ff fc43 	bl	8000ee8 <LL_APB2_GRP1_EnableClock>

  /* TIM21 interrupt Init */
  NVIC_SetPriority(TIM21_IRQn, 0);
 8001662:	2100      	movs	r1, #0
 8001664:	2014      	movs	r0, #20
 8001666:	f7ff fa43 	bl	8000af0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM21_IRQn);
 800166a:	2014      	movs	r0, #20
 800166c:	f7ff fa26 	bl	8000abc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001670:	003b      	movs	r3, r7
 8001672:	2200      	movs	r2, #0
 8001674:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001676:	003b      	movs	r3, r7
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 32000;
 800167c:	003b      	movs	r3, r7
 800167e:	22fa      	movs	r2, #250	; 0xfa
 8001680:	01d2      	lsls	r2, r2, #7
 8001682:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001684:	003b      	movs	r3, r7
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM21, &TIM_InitStruct);
 800168a:	003b      	movs	r3, r7
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <MX_TIM21_Init+0x7c>)
 800168e:	0019      	movs	r1, r3
 8001690:	0010      	movs	r0, r2
 8001692:	f000 fd91 	bl	80021b8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM21);
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_TIM21_Init+0x7c>)
 8001698:	0018      	movs	r0, r3
 800169a:	f7ff fca9 	bl	8000ff0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM21, LL_TIM_CLOCKSOURCE_INTERNAL);
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_TIM21_Init+0x7c>)
 80016a0:	2100      	movs	r1, #0
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7ff fd24 	bl	80010f0 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM21, LL_TIM_TRGO_RESET);
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_TIM21_Init+0x7c>)
 80016aa:	2100      	movs	r1, #0
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff fd33 	bl	8001118 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM21);
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <MX_TIM21_Init+0x7c>)
 80016b4:	0018      	movs	r0, r3
 80016b6:	f7ff fd41 	bl	800113c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b004      	add	sp, #16
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	40010800 	.word	0x40010800

080016c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b08f      	sub	sp, #60	; 0x3c
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80016ce:	241c      	movs	r4, #28
 80016d0:	193b      	adds	r3, r7, r4
 80016d2:	0018      	movs	r0, r3
 80016d4:	231c      	movs	r3, #28
 80016d6:	001a      	movs	r2, r3
 80016d8:	2100      	movs	r1, #0
 80016da:	f001 f873 	bl	80027c4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	0018      	movs	r0, r3
 80016e2:	2318      	movs	r3, #24
 80016e4:	001a      	movs	r2, r3
 80016e6:	2100      	movs	r1, #0
 80016e8:	f001 f86c 	bl	80027c4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	029b      	lsls	r3, r3, #10
 80016f0:	0018      	movs	r0, r3
 80016f2:	f7ff fbe3 	bl	8000ebc <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff fc0c 	bl	8000f14 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA0-CK_IN   ------> USART2_RX
  PA2   ------> USART2_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2202      	movs	r2, #2
 8001706:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2203      	movs	r2, #3
 800170c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	1d3a      	adds	r2, r7, #4
 8001722:	23a0      	movs	r3, #160	; 0xa0
 8001724:	05db      	lsls	r3, r3, #23
 8001726:	0011      	movs	r1, r2
 8001728:	0018      	movs	r0, r3
 800172a:	f000 fa84 	bl	8001c36 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2204      	movs	r2, #4
 8001732:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	2202      	movs	r2, #2
 8001738:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2203      	movs	r2, #3
 800173e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2204      	movs	r2, #4
 8001750:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	1d3a      	adds	r2, r7, #4
 8001754:	23a0      	movs	r3, #160	; 0xa0
 8001756:	05db      	lsls	r3, r3, #23
 8001758:	0011      	movs	r1, r2
 800175a:	0018      	movs	r0, r3
 800175c:	f000 fa6b 	bl	8001c36 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001760:	193b      	adds	r3, r7, r4
 8001762:	22e1      	movs	r2, #225	; 0xe1
 8001764:	0252      	lsls	r2, r2, #9
 8001766:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001768:	0021      	movs	r1, r4
 800176a:	187b      	adds	r3, r7, r1
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800177c:	187b      	adds	r3, r7, r1
 800177e:	220c      	movs	r2, #12
 8001780:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001782:	187b      	adds	r3, r7, r1
 8001784:	2200      	movs	r2, #0
 8001786:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001788:	187b      	adds	r3, r7, r1
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 800178e:	187b      	adds	r3, r7, r1
 8001790:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <MX_USART2_UART_Init+0xec>)
 8001792:	0019      	movs	r1, r3
 8001794:	0010      	movs	r0, r2
 8001796:	f000 ff51 	bl	800263c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART2_UART_Init+0xec>)
 800179c:	0018      	movs	r0, r3
 800179e:	f7ff fceb 	bl	8001178 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <MX_USART2_UART_Init+0xec>)
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7ff fcd8 	bl	800115a <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b00f      	add	sp, #60	; 0x3c
 80017b0:	bd90      	pop	{r4, r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	40004400 	.word	0x40004400

080017b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	003b      	movs	r3, r7
 80017c0:	0018      	movs	r0, r3
 80017c2:	2318      	movs	r3, #24
 80017c4:	001a      	movs	r2, r3
 80017c6:	2100      	movs	r1, #0
 80017c8:	f000 fffc 	bl	80027c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f7ff fba1 	bl	8000f14 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(DAC_nLDAC_GPIO_Port, DAC_nLDAC_Pin);
 80017d2:	23a0      	movs	r3, #160	; 0xa0
 80017d4:	05db      	lsls	r3, r3, #23
 80017d6:	2108      	movs	r1, #8
 80017d8:	0018      	movs	r0, r3
 80017da:	f7ff fce5 	bl	80011a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DAC_nCS_GPIO_Port, DAC_nCS_Pin);
 80017de:	23a0      	movs	r3, #160	; 0xa0
 80017e0:	05db      	lsls	r3, r3, #23
 80017e2:	2110      	movs	r1, #16
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff fcdf 	bl	80011a8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = DAC_nLDAC_Pin;
 80017ea:	003b      	movs	r3, r7
 80017ec:	2208      	movs	r2, #8
 80017ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017f0:	003b      	movs	r3, r7
 80017f2:	2201      	movs	r2, #1
 80017f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017f6:	003b      	movs	r3, r7
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017fc:	003b      	movs	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001802:	003b      	movs	r3, r7
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DAC_nLDAC_GPIO_Port, &GPIO_InitStruct);
 8001808:	003a      	movs	r2, r7
 800180a:	23a0      	movs	r3, #160	; 0xa0
 800180c:	05db      	lsls	r3, r3, #23
 800180e:	0011      	movs	r1, r2
 8001810:	0018      	movs	r0, r3
 8001812:	f000 fa10 	bl	8001c36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DAC_nCS_Pin;
 8001816:	003b      	movs	r3, r7
 8001818:	2210      	movs	r2, #16
 800181a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800181c:	003b      	movs	r3, r7
 800181e:	2201      	movs	r2, #1
 8001820:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001822:	003b      	movs	r3, r7
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001828:	003b      	movs	r3, r7
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800182e:	003b      	movs	r3, r7
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DAC_nCS_GPIO_Port, &GPIO_InitStruct);
 8001834:	003a      	movs	r2, r7
 8001836:	23a0      	movs	r3, #160	; 0xa0
 8001838:	05db      	lsls	r3, r3, #23
 800183a:	0011      	movs	r1, r2
 800183c:	0018      	movs	r0, r3
 800183e:	f000 f9fa 	bl	8001c36 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b006      	add	sp, #24
 8001848:	bd80      	pop	{r7, pc}

0800184a <LL_TIM_ClearFlag_UPDATE>:
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2202      	movs	r2, #2
 8001856:	4252      	negs	r2, r2
 8001858:	611a      	str	r2, [r3, #16]
}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	b002      	add	sp, #8
 8001860:	bd80      	pop	{r7, pc}

08001862 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	2201      	movs	r2, #1
 8001870:	4013      	ands	r3, r2
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800187a:	2300      	movs	r3, #0
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler+0x4>

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
    if(LL_TIM_IsActiveFlag_UPDATE(TIM21) != RESET) {
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <TIM21_IRQHandler+0x24>)
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7ff ffd3 	bl	8001862 <LL_TIM_IsActiveFlag_UPDATE>
 80018bc:	1e03      	subs	r3, r0, #0
 80018be:	d005      	beq.n	80018cc <TIM21_IRQHandler+0x1c>
        LL_TIM_ClearFlag_UPDATE(TIM21);
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <TIM21_IRQHandler+0x24>)
 80018c2:	0018      	movs	r0, r3
 80018c4:	f7ff ffc1 	bl	800184a <LL_TIM_ClearFlag_UPDATE>
        // Appel à la fonction LedPulse
        LedPulse();
 80018c8:	f7fe fd00 	bl	80002cc <LedPulse>
    }
  /* USER CODE END TIM21_IRQn 0 */
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	40010800 	.word	0x40010800

080018d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <_sbrk+0x5c>)
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <_sbrk+0x60>)
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <_sbrk+0x64>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	; (8001940 <_sbrk+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	18d3      	adds	r3, r2, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	429a      	cmp	r2, r3
 8001906:	d207      	bcs.n	8001918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001908:	f000 ff64 	bl	80027d4 <__errno>
 800190c:	0003      	movs	r3, r0
 800190e:	220c      	movs	r2, #12
 8001910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001912:	2301      	movs	r3, #1
 8001914:	425b      	negs	r3, r3
 8001916:	e009      	b.n	800192c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	18d2      	adds	r2, r2, r3
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <_sbrk+0x64>)
 8001928:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b006      	add	sp, #24
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000800 	.word	0x20000800
 8001938:	00000400 	.word	0x00000400
 800193c:	20000078 	.word	0x20000078
 8001940:	200001c8 	.word	0x200001c8

08001944 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001950:	4813      	ldr	r0, [pc, #76]	; (80019a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001952:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001954:	f7ff fff6 	bl	8001944 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001958:	4812      	ldr	r0, [pc, #72]	; (80019a4 <LoopForever+0x6>)
    LDR R1, [R0]
 800195a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800195c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <LoopForever+0xa>)
    CMP R1, R2
 8001960:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001962:	d105      	bne.n	8001970 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001964:	4811      	ldr	r0, [pc, #68]	; (80019ac <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001966:	4912      	ldr	r1, [pc, #72]	; (80019b0 <LoopForever+0x12>)
    STR R1, [R0]
 8001968:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800196a:	4812      	ldr	r0, [pc, #72]	; (80019b4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800196c:	4912      	ldr	r1, [pc, #72]	; (80019b8 <LoopForever+0x1a>)
    STR R1, [R0]
 800196e:	6001      	str	r1, [r0, #0]

08001970 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001970:	4812      	ldr	r0, [pc, #72]	; (80019bc <LoopForever+0x1e>)
  ldr r1, =_edata
 8001972:	4913      	ldr	r1, [pc, #76]	; (80019c0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001974:	4a13      	ldr	r2, [pc, #76]	; (80019c4 <LoopForever+0x26>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001988:	4c10      	ldr	r4, [pc, #64]	; (80019cc <LoopForever+0x2e>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001996:	f000 ff23 	bl	80027e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199a:	f7ff fc11 	bl	80011c0 <main>

0800199e <LoopForever>:

LoopForever:
    b LoopForever
 800199e:	e7fe      	b.n	800199e <LoopForever>
   ldr   r0, =_estack
 80019a0:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 80019a4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80019a8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80019ac:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80019b0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80019b4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80019b8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80019c4:	08003240 	.word	0x08003240
  ldr r2, =_sbss
 80019c8:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80019cc:	200001c4 	.word	0x200001c4

080019d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC1_COMP_IRQHandler>

080019d2 <LL_ADC_IsEnabled>:
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2201      	movs	r2, #1
 80019e0:	4013      	ands	r3, r2
 80019e2:	3b01      	subs	r3, #1
 80019e4:	425a      	negs	r2, r3
 80019e6:	4153      	adcs	r3, r2
 80019e8:	b2db      	uxtb	r3, r3
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b002      	add	sp, #8
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80019fe:	230f      	movs	r3, #15
 8001a00:	18fb      	adds	r3, r7, r3
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff ffe2 	bl	80019d2 <LL_ADC_IsEnabled>
 8001a0e:	1e03      	subs	r3, r0, #0
 8001a10:	d118      	bne.n	8001a44 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <LL_ADC_Init+0x68>)
 8001a18:	401a      	ands	r2, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	6859      	ldr	r1, [r3, #4]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4319      	orrs	r1, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	089a      	lsrs	r2, r3, #2
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	611a      	str	r2, [r3, #16]
 8001a42:	e003      	b.n	8001a4c <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001a44:	230f      	movs	r3, #15
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	781b      	ldrb	r3, [r3, #0]
}
 8001a52:	0018      	movs	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b004      	add	sp, #16
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	ffff3fc7 	.word	0xffff3fc7

08001a60 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001a6a:	230f      	movs	r3, #15
 8001a6c:	18fb      	adds	r3, r7, r3
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff ffac 	bl	80019d2 <LL_ADC_IsEnabled>
 8001a7a:	1e03      	subs	r3, r0, #0
 8001a7c:	d115      	bne.n	8001aaa <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <LL_ADC_REG_Init+0x60>)
 8001a84:	401a      	ands	r2, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6819      	ldr	r1, [r3, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4319      	orrs	r1, r3
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4319      	orrs	r1, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	4319      	orrs	r1, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	e003      	b.n	8001ab2 <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001aaa:	230f      	movs	r3, #15
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001ab2:	230f      	movs	r3, #15
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	781b      	ldrb	r3, [r3, #0]
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b004      	add	sp, #16
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	fffec23c 	.word	0xfffec23c

08001ac4 <LL_GPIO_SetPinMode>:
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6819      	ldr	r1, [r3, #0]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	435b      	muls	r3, r3
 8001ad8:	001a      	movs	r2, r3
 8001ada:	0013      	movs	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	189b      	adds	r3, r3, r2
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	435b      	muls	r3, r3
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	434b      	muls	r3, r1
 8001aee:	431a      	orrs	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	601a      	str	r2, [r3, #0]
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b004      	add	sp, #16
 8001afa:	bd80      	pop	{r7, pc}

08001afc <LL_GPIO_SetPinOutputType>:
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	43d2      	mvns	r2, r2
 8001b10:	401a      	ands	r2, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	434b      	muls	r3, r1
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	605a      	str	r2, [r3, #4]
}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b004      	add	sp, #16
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <LL_GPIO_SetPinSpeed>:
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6899      	ldr	r1, [r3, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	435b      	muls	r3, r3
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	0013      	movs	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	189b      	adds	r3, r3, r2
 8001b42:	43db      	mvns	r3, r3
 8001b44:	400b      	ands	r3, r1
 8001b46:	001a      	movs	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	435b      	muls	r3, r3
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	434b      	muls	r3, r1
 8001b50:	431a      	orrs	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	609a      	str	r2, [r3, #8]
}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b004      	add	sp, #16
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <LL_GPIO_SetPinPull>:
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	68d9      	ldr	r1, [r3, #12]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	435b      	muls	r3, r3
 8001b72:	001a      	movs	r2, r3
 8001b74:	0013      	movs	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	189b      	adds	r3, r3, r2
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	400b      	ands	r3, r1
 8001b7e:	001a      	movs	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	435b      	muls	r3, r3
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	434b      	muls	r3, r1
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	60da      	str	r2, [r3, #12]
}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b004      	add	sp, #16
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <LL_GPIO_SetAFPin_0_7>:
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a19      	ldr	r1, [r3, #32]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	435b      	muls	r3, r3
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	4353      	muls	r3, r2
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	435a      	muls	r2, r3
 8001bb2:	0013      	movs	r3, r2
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	1a9b      	subs	r3, r3, r2
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	400b      	ands	r3, r1
 8001bbc:	001a      	movs	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	435b      	muls	r3, r3
 8001bc2:	68b9      	ldr	r1, [r7, #8]
 8001bc4:	434b      	muls	r3, r1
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	434b      	muls	r3, r1
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	434b      	muls	r3, r1
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	621a      	str	r2, [r3, #32]
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b004      	add	sp, #16
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <LL_GPIO_SetAFPin_8_15>:
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	0a12      	lsrs	r2, r2, #8
 8001bf4:	4353      	muls	r3, r2
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	0a12      	lsrs	r2, r2, #8
 8001bfa:	4353      	muls	r3, r2
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	0a12      	lsrs	r2, r2, #8
 8001c00:	435a      	muls	r2, r3
 8001c02:	0013      	movs	r3, r2
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	400b      	ands	r3, r1
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	0a09      	lsrs	r1, r1, #8
 8001c16:	434b      	muls	r3, r1
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	0a09      	lsrs	r1, r1, #8
 8001c1c:	434b      	muls	r3, r1
 8001c1e:	68b9      	ldr	r1, [r7, #8]
 8001c20:	0a09      	lsrs	r1, r1, #8
 8001c22:	434b      	muls	r3, r1
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	434b      	muls	r3, r1
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b004      	add	sp, #16
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001c48:	e048      	b.n	8001cdc <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2101      	movs	r1, #1
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4091      	lsls	r1, r2
 8001c54:	000a      	movs	r2, r1
 8001c56:	4013      	ands	r3, r2
 8001c58:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d03a      	beq.n	8001cd6 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d003      	beq.n	8001c70 <LL_GPIO_Init+0x3a>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d10e      	bne.n	8001c8e <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7ff ff54 	bl	8001b26 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6819      	ldr	r1, [r3, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7ff ff37 	bl	8001afc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7ff ff61 	bl	8001b5e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d111      	bne.n	8001cc8 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2bff      	cmp	r3, #255	; 0xff
 8001ca8:	d807      	bhi.n	8001cba <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f7ff ff6f 	bl	8001b96 <LL_GPIO_SetAFPin_0_7>
 8001cb8:	e006      	b.n	8001cc8 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	68b9      	ldr	r1, [r7, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7ff ff8a 	bl	8001bdc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7ff fef7 	bl	8001ac4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	40da      	lsrs	r2, r3
 8001ce4:	1e13      	subs	r3, r2, #0
 8001ce6:	d1b0      	bne.n	8001c4a <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b004      	add	sp, #16
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <LL_RCC_HSI_IsReady>:
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <LL_RCC_HSI_IsReady+0x1c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d101      	bne.n	8001d08 <LL_RCC_HSI_IsReady+0x14>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <LL_RCC_HSI_IsReady+0x16>
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000

08001d14 <LL_RCC_LSE_IsReady>:
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <LL_RCC_LSE_IsReady+0x24>)
 8001d1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	401a      	ands	r2, r3
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d101      	bne.n	8001d2e <LL_RCC_LSE_IsReady+0x1a>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <LL_RCC_LSE_IsReady+0x1c>
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	40021000 	.word	0x40021000

08001d3c <LL_RCC_MSI_GetRange>:
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <LL_RCC_MSI_GetRange+0x14>)
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	23e0      	movs	r3, #224	; 0xe0
 8001d46:	021b      	lsls	r3, r3, #8
 8001d48:	4013      	ands	r3, r2
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000

08001d54 <LL_RCC_GetSysClkSource>:
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <LL_RCC_GetSysClkSource+0x14>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	220c      	movs	r2, #12
 8001d5e:	4013      	ands	r3, r2
}
 8001d60:	0018      	movs	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	40021000 	.word	0x40021000

08001d6c <LL_RCC_GetAHBPrescaler>:
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <LL_RCC_GetAHBPrescaler+0x14>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	22f0      	movs	r2, #240	; 0xf0
 8001d76:	4013      	ands	r3, r2
}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	40021000 	.word	0x40021000

08001d84 <LL_RCC_GetAPB1Prescaler>:
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	23e0      	movs	r3, #224	; 0xe0
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4013      	ands	r3, r2
}
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000

08001d9c <LL_RCC_GetUSARTClockSource>:
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <LL_RCC_GetUSARTClockSource+0x20>)
 8001da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	401a      	ands	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	041b      	lsls	r3, r3, #16
 8001db0:	4313      	orrs	r3, r2
}
 8001db2:	0018      	movs	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b002      	add	sp, #8
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <LL_RCC_PLL_GetMainSource+0x14>)
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	025b      	lsls	r3, r3, #9
 8001dcc:	4013      	ands	r3, r2
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	23f0      	movs	r3, #240	; 0xf0
 8001de2:	039b      	lsls	r3, r3, #14
 8001de4:	4013      	ands	r3, r2
}
 8001de6:	0018      	movs	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000

08001df0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <LL_RCC_PLL_GetDivider+0x14>)
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	23c0      	movs	r3, #192	; 0xc0
 8001dfa:	041b      	lsls	r3, r3, #16
 8001dfc:	4013      	ands	r3, r2
}
 8001dfe:	0018      	movs	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000

08001e08 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2210      	movs	r2, #16
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b10      	cmp	r3, #16
 8001e16:	d101      	bne.n	8001e1c <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	0018      	movs	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000

08001e28 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	d13c      	bne.n	8001eb4 <LL_RCC_GetUSARTClockFreq+0x8c>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff ffad 	bl	8001d9c <LL_RCC_GetUSARTClockSource>
 8001e42:	0003      	movs	r3, r0
 8001e44:	4a1e      	ldr	r2, [pc, #120]	; (8001ec0 <LL_RCC_GetUSARTClockFreq+0x98>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01c      	beq.n	8001e84 <LL_RCC_GetUSARTClockFreq+0x5c>
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <LL_RCC_GetUSARTClockFreq+0x98>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d821      	bhi.n	8001e94 <LL_RCC_GetUSARTClockFreq+0x6c>
 8001e50:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <LL_RCC_GetUSARTClockFreq+0x9c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d003      	beq.n	8001e5e <LL_RCC_GetUSARTClockFreq+0x36>
 8001e56:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d005      	beq.n	8001e68 <LL_RCC_GetUSARTClockFreq+0x40>
 8001e5c:	e01a      	b.n	8001e94 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001e5e:	f000 f839 	bl	8001ed4 <RCC_GetSystemClockFreq>
 8001e62:	0003      	movs	r3, r0
 8001e64:	60fb      	str	r3, [r7, #12]
        break;
 8001e66:	e025      	b.n	8001eb4 <LL_RCC_GetUSARTClockFreq+0x8c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001e68:	f7ff ff44 	bl	8001cf4 <LL_RCC_HSI_IsReady>
 8001e6c:	1e03      	subs	r3, r0, #0
 8001e6e:	d01e      	beq.n	8001eae <LL_RCC_GetUSARTClockFreq+0x86>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001e70:	f7ff ffca 	bl	8001e08 <LL_RCC_IsActiveFlag_HSIDIV>
 8001e74:	1e03      	subs	r3, r0, #0
 8001e76:	d002      	beq.n	8001e7e <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <LL_RCC_GetUSARTClockFreq+0xa4>)
 8001e7a:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8001e7c:	e017      	b.n	8001eae <LL_RCC_GetUSARTClockFreq+0x86>
            usart_frequency = HSI_VALUE;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <LL_RCC_GetUSARTClockFreq+0xa8>)
 8001e80:	60fb      	str	r3, [r7, #12]
        break;
 8001e82:	e014      	b.n	8001eae <LL_RCC_GetUSARTClockFreq+0x86>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001e84:	f7ff ff46 	bl	8001d14 <LL_RCC_LSE_IsReady>
 8001e88:	1e03      	subs	r3, r0, #0
 8001e8a:	d012      	beq.n	8001eb2 <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          usart_frequency = LSE_VALUE;
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001e92:	e00e      	b.n	8001eb2 <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001e94:	f000 f81e 	bl	8001ed4 <RCC_GetSystemClockFreq>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 f85e 	bl	8001f5c <RCC_GetHCLKClockFreq>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 f870 	bl	8001f88 <RCC_GetPCLK1ClockFreq>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	60fb      	str	r3, [r7, #12]
        break;
 8001eac:	e002      	b.n	8001eb4 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	e000      	b.n	8001eb4 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 8001eb2:	46c0      	nop			; (mov r8, r8)
    }
  }
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b004      	add	sp, #16
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	000c000c 	.word	0x000c000c
 8001ec4:	000c0004 	.word	0x000c0004
 8001ec8:	000c0008 	.word	0x000c0008
 8001ecc:	003d0900 	.word	0x003d0900
 8001ed0:	00f42400 	.word	0x00f42400

08001ed4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001eda:	f7ff ff3b 	bl	8001d54 <LL_RCC_GetSysClkSource>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	2b0c      	cmp	r3, #12
 8001ee2:	d020      	beq.n	8001f26 <RCC_GetSystemClockFreq+0x52>
 8001ee4:	d824      	bhi.n	8001f30 <RCC_GetSystemClockFreq+0x5c>
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d01a      	beq.n	8001f20 <RCC_GetSystemClockFreq+0x4c>
 8001eea:	d821      	bhi.n	8001f30 <RCC_GetSystemClockFreq+0x5c>
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <RCC_GetSystemClockFreq+0x22>
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d00b      	beq.n	8001f0c <RCC_GetSystemClockFreq+0x38>
 8001ef4:	e01c      	b.n	8001f30 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001ef6:	f7ff ff21 	bl	8001d3c <LL_RCC_MSI_GetRange>
 8001efa:	0003      	movs	r3, r0
 8001efc:	0b5b      	lsrs	r3, r3, #13
 8001efe:	3301      	adds	r3, #1
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	0212      	lsls	r2, r2, #8
 8001f04:	409a      	lsls	r2, r3
 8001f06:	0013      	movs	r3, r2
 8001f08:	607b      	str	r3, [r7, #4]
      break;
 8001f0a:	e01c      	b.n	8001f46 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001f0c:	f7ff ff7c 	bl	8001e08 <LL_RCC_IsActiveFlag_HSIDIV>
 8001f10:	1e03      	subs	r3, r0, #0
 8001f12:	d002      	beq.n	8001f1a <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8001f14:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <RCC_GetSystemClockFreq+0x7c>)
 8001f16:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8001f18:	e015      	b.n	8001f46 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <RCC_GetSystemClockFreq+0x80>)
 8001f1c:	607b      	str	r3, [r7, #4]
      break;
 8001f1e:	e012      	b.n	8001f46 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <RCC_GetSystemClockFreq+0x84>)
 8001f22:	607b      	str	r3, [r7, #4]
      break;
 8001f24:	e00f      	b.n	8001f46 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001f26:	f000 f843 	bl	8001fb0 <RCC_PLL_GetFreqDomain_SYS>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	607b      	str	r3, [r7, #4]
      break;
 8001f2e:	e00a      	b.n	8001f46 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001f30:	f7ff ff04 	bl	8001d3c <LL_RCC_MSI_GetRange>
 8001f34:	0003      	movs	r3, r0
 8001f36:	0b5b      	lsrs	r3, r3, #13
 8001f38:	3301      	adds	r3, #1
 8001f3a:	2280      	movs	r2, #128	; 0x80
 8001f3c:	0212      	lsls	r2, r2, #8
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	0013      	movs	r3, r2
 8001f42:	607b      	str	r3, [r7, #4]
      break;
 8001f44:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001f46:	687b      	ldr	r3, [r7, #4]
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b002      	add	sp, #8
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	003d0900 	.word	0x003d0900
 8001f54:	00f42400 	.word	0x00f42400
 8001f58:	007a1200 	.word	0x007a1200

08001f5c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001f64:	f7ff ff02 	bl	8001d6c <LL_RCC_GetAHBPrescaler>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	4013      	ands	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <RCC_GetHCLKClockFreq+0x28>)
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	001a      	movs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	40d3      	lsrs	r3, r2
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b002      	add	sp, #8
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	080031e4 	.word	0x080031e4

08001f88 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001f90:	f7ff fef8 	bl	8001d84 <LL_RCC_GetAPB1Prescaler>
 8001f94:	0003      	movs	r3, r0
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <RCC_GetPCLK1ClockFreq+0x24>)
 8001f9a:	5cd3      	ldrb	r3, [r2, r3]
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	40d3      	lsrs	r3, r2
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b002      	add	sp, #8
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	080031f4 	.word	0x080031f4

08001fb0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001fb6:	f7ff ff03 	bl	8001dc0 <LL_RCC_PLL_GetMainSource>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d109      	bne.n	8001fd8 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001fc4:	f7ff ff20 	bl	8001e08 <LL_RCC_IsActiveFlag_HSIDIV>
 8001fc8:	1e03      	subs	r3, r0, #0
 8001fca:	d002      	beq.n	8001fd2 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001fce:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8001fd0:	e005      	b.n	8001fde <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8001fd4:	607b      	str	r3, [r7, #4]
      break;
 8001fd6:	e002      	b.n	8001fde <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001fda:	607b      	str	r3, [r7, #4]
      break;
 8001fdc:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8001fde:	f7ff fefb 	bl	8001dd8 <LL_RCC_PLL_GetMultiplicator>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	0c9b      	lsrs	r3, r3, #18
 8001fe6:	4a0d      	ldr	r2, [pc, #52]	; (800201c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001fe8:	5cd3      	ldrb	r3, [r2, r3]
 8001fea:	001a      	movs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4353      	muls	r3, r2
 8001ff0:	001c      	movs	r4, r3
 8001ff2:	f7ff fefd 	bl	8001df0 <LL_RCC_PLL_GetDivider>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	0d9b      	lsrs	r3, r3, #22
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	0020      	movs	r0, r4
 8002000:	f7fe f88c 	bl	800011c <__udivsi3>
 8002004:	0003      	movs	r3, r0
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b003      	add	sp, #12
 800200c:	bd90      	pop	{r4, r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	003d0900 	.word	0x003d0900
 8002014:	00f42400 	.word	0x00f42400
 8002018:	007a1200 	.word	0x007a1200
 800201c:	080031fc 	.word	0x080031fc

08002020 <LL_SPI_IsEnabled>:
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2240      	movs	r2, #64	; 0x40
 800202e:	4013      	ands	r3, r2
 8002030:	2b40      	cmp	r3, #64	; 0x40
 8002032:	d101      	bne.n	8002038 <LL_SPI_IsEnabled+0x18>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <LL_SPI_IsEnabled+0x1a>
 8002038:	2300      	movs	r3, #0
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b002      	add	sp, #8
 8002040:	bd80      	pop	{r7, pc}

08002042 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	001a      	movs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	611a      	str	r2, [r3, #16]
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800206a:	230f      	movs	r3, #15
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	0018      	movs	r0, r3
 8002076:	f7ff ffd3 	bl	8002020 <LL_SPI_IsEnabled>
 800207a:	1e03      	subs	r3, r0, #0
 800207c:	d13c      	bne.n	80020f8 <LL_SPI_Init+0x98>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a21      	ldr	r2, [pc, #132]	; (8002108 <LL_SPI_Init+0xa8>)
 8002084:	401a      	ands	r2, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6819      	ldr	r1, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4319      	orrs	r1, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4319      	orrs	r1, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	4319      	orrs	r1, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	4319      	orrs	r1, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	4319      	orrs	r1, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4319      	orrs	r1, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4319      	orrs	r1, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2204      	movs	r2, #4
 80020c6:	4393      	bics	r3, r2
 80020c8:	001a      	movs	r2, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6a1a      	ldr	r2, [r3, #32]
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	019b      	lsls	r3, r3, #6
 80020de:	429a      	cmp	r2, r3
 80020e0:	d106      	bne.n	80020f0 <LL_SPI_Init+0x90>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	0011      	movs	r1, r2
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7ff ffa9 	bl	8002042 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80020f0:	230f      	movs	r3, #15
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 80020f8:	230f      	movs	r3, #15
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	781b      	ldrb	r3, [r3, #0]
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b004      	add	sp, #16
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	ffff0040 	.word	0xffff0040

0800210c <LL_TIM_SetPrescaler>:
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}

08002124 <LL_TIM_SetAutoReload>:
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002134:	46c0      	nop			; (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	b002      	add	sp, #8
 800213a:	bd80      	pop	{r7, pc}

0800213c <LL_TIM_OC_SetCompareCH1>:
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b002      	add	sp, #8
 8002152:	bd80      	pop	{r7, pc}

08002154 <LL_TIM_OC_SetCompareCH2>:
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002164:	46c0      	nop			; (mov r8, r8)
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}

0800216c <LL_TIM_OC_SetCompareCH3>:
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b002      	add	sp, #8
 8002182:	bd80      	pop	{r7, pc}

08002184 <LL_TIM_OC_SetCompareCH4>:
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002194:	46c0      	nop			; (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}

0800219c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	2201      	movs	r2, #1
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	615a      	str	r2, [r3, #20]
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b002      	add	sp, #8
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	05db      	lsls	r3, r3, #23
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d003      	beq.n	80021da <LL_TIM_Init+0x22>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a1a      	ldr	r2, [pc, #104]	; (8002240 <LL_TIM_Init+0x88>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d107      	bne.n	80021ea <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2270      	movs	r2, #112	; 0x70
 80021de:	4393      	bics	r3, r2
 80021e0:	001a      	movs	r2, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	05db      	lsls	r3, r3, #23
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d003      	beq.n	80021fc <LL_TIM_Init+0x44>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <LL_TIM_Init+0x88>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d106      	bne.n	800220a <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4a11      	ldr	r2, [pc, #68]	; (8002244 <LL_TIM_Init+0x8c>)
 8002200:	401a      	ands	r2, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0011      	movs	r1, r2
 8002218:	0018      	movs	r0, r3
 800221a:	f7ff ff83 	bl	8002124 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	001a      	movs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	0011      	movs	r1, r2
 8002228:	0018      	movs	r0, r3
 800222a:	f7ff ff6f 	bl	800210c <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0018      	movs	r0, r3
 8002232:	f7ff ffb3 	bl	800219c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002236:	2300      	movs	r3, #0
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	b004      	add	sp, #16
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40010800 	.word	0x40010800
 8002244:	fffffcff 	.word	0xfffffcff

08002248 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002254:	2317      	movs	r3, #23
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	015b      	lsls	r3, r3, #5
 8002262:	429a      	cmp	r2, r3
 8002264:	d036      	beq.n	80022d4 <LL_TIM_OC_Init+0x8c>
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	015b      	lsls	r3, r3, #5
 800226c:	429a      	cmp	r2, r3
 800226e:	d83c      	bhi.n	80022ea <LL_TIM_OC_Init+0xa2>
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	429a      	cmp	r2, r3
 8002278:	d021      	beq.n	80022be <LL_TIM_OC_Init+0x76>
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	429a      	cmp	r2, r3
 8002282:	d832      	bhi.n	80022ea <LL_TIM_OC_Init+0xa2>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d003      	beq.n	8002292 <LL_TIM_OC_Init+0x4a>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b10      	cmp	r3, #16
 800228e:	d00b      	beq.n	80022a8 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002290:	e02b      	b.n	80022ea <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002292:	2317      	movs	r3, #23
 8002294:	18fc      	adds	r4, r7, r3
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	0011      	movs	r1, r2
 800229c:	0018      	movs	r0, r3
 800229e:	f000 f82c 	bl	80022fa <OC1Config>
 80022a2:	0003      	movs	r3, r0
 80022a4:	7023      	strb	r3, [r4, #0]
      break;
 80022a6:	e021      	b.n	80022ec <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80022a8:	2317      	movs	r3, #23
 80022aa:	18fc      	adds	r4, r7, r3
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	0011      	movs	r1, r2
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 f868 	bl	8002388 <OC2Config>
 80022b8:	0003      	movs	r3, r0
 80022ba:	7023      	strb	r3, [r4, #0]
      break;
 80022bc:	e016      	b.n	80022ec <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80022be:	2317      	movs	r3, #23
 80022c0:	18fc      	adds	r4, r7, r3
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	0011      	movs	r1, r2
 80022c8:	0018      	movs	r0, r3
 80022ca:	f000 f8a9 	bl	8002420 <OC3Config>
 80022ce:	0003      	movs	r3, r0
 80022d0:	7023      	strb	r3, [r4, #0]
      break;
 80022d2:	e00b      	b.n	80022ec <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80022d4:	2317      	movs	r3, #23
 80022d6:	18fc      	adds	r4, r7, r3
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	0011      	movs	r1, r2
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 f8e8 	bl	80024b4 <OC4Config>
 80022e4:	0003      	movs	r3, r0
 80022e6:	7023      	strb	r3, [r4, #0]
      break;
 80022e8:	e000      	b.n	80022ec <LL_TIM_OC_Init+0xa4>
      break;
 80022ea:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 80022ec:	2317      	movs	r3, #23
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	781b      	ldrb	r3, [r3, #0]
}
 80022f2:	0018      	movs	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b007      	add	sp, #28
 80022f8:	bd90      	pop	{r4, r7, pc}

080022fa <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	2201      	movs	r2, #1
 800230a:	4393      	bics	r3, r2
 800230c:	001a      	movs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2203      	movs	r2, #3
 8002328:	4393      	bics	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2270      	movs	r2, #112	; 0x70
 8002330:	4393      	bics	r3, r2
 8002332:	001a      	movs	r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2202      	movs	r2, #2
 8002340:	4393      	bics	r3, r2
 8002342:	001a      	movs	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2201      	movs	r2, #1
 8002350:	4393      	bics	r3, r2
 8002352:	001a      	movs	r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	0011      	movs	r1, r2
 8002370:	0018      	movs	r0, r3
 8002372:	f7ff fee3 	bl	800213c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800237c:	2300      	movs	r3, #0
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b006      	add	sp, #24
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	2210      	movs	r2, #16
 8002398:	4393      	bics	r3, r2
 800239a:	001a      	movs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4a18      	ldr	r2, [pc, #96]	; (8002418 <OC2Config+0x90>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a17      	ldr	r2, [pc, #92]	; (800241c <OC2Config+0x94>)
 80023be:	401a      	ands	r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2220      	movs	r2, #32
 80023ce:	4393      	bics	r3, r2
 80023d0:	001a      	movs	r2, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	4313      	orrs	r3, r2
 80023da:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2210      	movs	r2, #16
 80023e0:	4393      	bics	r3, r2
 80023e2:	001a      	movs	r2, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	0011      	movs	r1, r2
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff fea6 	bl	8002154 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800240e:	2300      	movs	r3, #0
}
 8002410:	0018      	movs	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	b006      	add	sp, #24
 8002416:	bd80      	pop	{r7, pc}
 8002418:	fffffcff 	.word	0xfffffcff
 800241c:	ffff8fff 	.word	0xffff8fff

08002420 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <OC3Config+0x8c>)
 8002430:	401a      	ands	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2203      	movs	r2, #3
 800244c:	4393      	bics	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2270      	movs	r2, #112	; 0x70
 8002454:	4393      	bics	r3, r2
 8002456:	001a      	movs	r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	4a13      	ldr	r2, [pc, #76]	; (80024b0 <OC3Config+0x90>)
 8002464:	401a      	ands	r2, r3
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <OC3Config+0x8c>)
 8002474:	401a      	ands	r2, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0011      	movs	r1, r2
 8002494:	0018      	movs	r0, r3
 8002496:	f7ff fe69 	bl	800216c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b006      	add	sp, #24
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	fffffeff 	.word	0xfffffeff
 80024b0:	fffffdff 	.word	0xfffffdff

080024b4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a1f      	ldr	r2, [pc, #124]	; (8002540 <OC4Config+0x8c>)
 80024c4:	401a      	ands	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a19      	ldr	r2, [pc, #100]	; (8002544 <OC4Config+0x90>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4a18      	ldr	r2, [pc, #96]	; (8002548 <OC4Config+0x94>)
 80024e8:	401a      	ands	r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	4a15      	ldr	r2, [pc, #84]	; (800254c <OC4Config+0x98>)
 80024f8:	401a      	ands	r2, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	031b      	lsls	r3, r3, #12
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	4a0e      	ldr	r2, [pc, #56]	; (8002540 <OC4Config+0x8c>)
 8002508:	401a      	ands	r2, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	031b      	lsls	r3, r3, #12
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	0011      	movs	r1, r2
 8002528:	0018      	movs	r0, r3
 800252a:	f7ff fe2b 	bl	8002184 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002534:	2300      	movs	r3, #0
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b006      	add	sp, #24
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	ffffefff 	.word	0xffffefff
 8002544:	fffffcff 	.word	0xfffffcff
 8002548:	ffff8fff 	.word	0xffff8fff
 800254c:	ffffdfff 	.word	0xffffdfff

08002550 <LL_USART_IsEnabled>:
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2201      	movs	r2, #1
 800255e:	4013      	ands	r3, r2
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <LL_USART_IsEnabled+0x18>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <LL_USART_IsEnabled+0x1a>
 8002568:	2300      	movs	r3, #0
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b002      	add	sp, #8
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <LL_USART_SetStopBitsLength>:
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4a05      	ldr	r2, [pc, #20]	; (8002598 <LL_USART_SetStopBitsLength+0x24>)
 8002584:	401a      	ands	r2, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	605a      	str	r2, [r3, #4]
}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	46bd      	mov	sp, r7
 8002592:	b002      	add	sp, #8
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	ffffcfff 	.word	0xffffcfff

0800259c <LL_USART_SetHWFlowCtrl>:
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <LL_USART_SetHWFlowCtrl+0x24>)
 80025ac:	401a      	ands	r2, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	609a      	str	r2, [r3, #8]
}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b002      	add	sp, #8
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	fffffcff 	.word	0xfffffcff

080025c4 <LL_USART_SetBaudRate>:
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	429a      	cmp	r2, r3
 80025da:	d11c      	bne.n	8002616 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	005a      	lsls	r2, r3, #1
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	085b      	lsrs	r3, r3, #1
 80025e4:	18d3      	adds	r3, r2, r3
 80025e6:	6839      	ldr	r1, [r7, #0]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f7fd fd97 	bl	800011c <__udivsi3>
 80025ee:	0003      	movs	r3, r0
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <LL_USART_SetBaudRate+0x74>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	085b      	lsrs	r3, r3, #1
 8002600:	b29b      	uxth	r3, r3
 8002602:	001a      	movs	r2, r3
 8002604:	2307      	movs	r3, #7
 8002606:	4013      	ands	r3, r2
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	60da      	str	r2, [r3, #12]
}
 8002614:	e00c      	b.n	8002630 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	085a      	lsrs	r2, r3, #1
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	18d3      	adds	r3, r2, r3
 800261e:	6839      	ldr	r1, [r7, #0]
 8002620:	0018      	movs	r0, r3
 8002622:	f7fd fd7b 	bl	800011c <__udivsi3>
 8002626:	0003      	movs	r3, r0
 8002628:	b29b      	uxth	r3, r3
 800262a:	001a      	movs	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	60da      	str	r2, [r3, #12]
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b006      	add	sp, #24
 8002636:	bd80      	pop	{r7, pc}
 8002638:	0000fff0 	.word	0x0000fff0

0800263c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002646:	230f      	movs	r3, #15
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	0018      	movs	r0, r3
 8002656:	f7ff ff7b 	bl	8002550 <LL_USART_IsEnabled>
 800265a:	1e03      	subs	r3, r0, #0
 800265c:	d13b      	bne.n	80026d6 <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a20      	ldr	r2, [pc, #128]	; (80026e4 <LL_USART_Init+0xa8>)
 8002664:	401a      	ands	r2, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	4319      	orrs	r1, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	4319      	orrs	r1, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	430b      	orrs	r3, r1
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	0011      	movs	r1, r2
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff ff72 	bl	8002574 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	0011      	movs	r1, r2
 8002698:	0018      	movs	r0, r3
 800269a:	f7ff ff7f 	bl	800259c <LL_USART_SetHWFlowCtrl>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <LL_USART_Init+0xac>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d104      	bne.n	80026b0 <LL_USART_Init+0x74>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80026a6:	200c      	movs	r0, #12
 80026a8:	f7ff fbbe 	bl	8001e28 <LL_RCC_GetUSARTClockFreq>
 80026ac:	0003      	movs	r3, r0
 80026ae:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00f      	beq.n	80026d6 <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 80026be:	230f      	movs	r3, #15
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff77 	bl	80025c4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80026d6:	230f      	movs	r3, #15
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	781b      	ldrb	r3, [r3, #0]
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b004      	add	sp, #16
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	efff69f3 	.word	0xefff69f3
 80026e8:	40004400 	.word	0x40004400

080026ec <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80026f6:	6839      	ldr	r1, [r7, #0]
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7fd fd0f 	bl	800011c <__udivsi3>
 80026fe:	0003      	movs	r3, r0
 8002700:	001a      	movs	r2, r3
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <LL_InitTick+0x30>)
 8002704:	3a01      	subs	r2, #1
 8002706:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <LL_InitTick+0x30>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800270e:	4b03      	ldr	r3, [pc, #12]	; (800271c <LL_InitTick+0x30>)
 8002710:	2205      	movs	r2, #5
 8002712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b002      	add	sp, #8
 800271a:	bd80      	pop	{r7, pc}
 800271c:	e000e010 	.word	0xe000e010

08002720 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002728:	23fa      	movs	r3, #250	; 0xfa
 800272a:	009a      	lsls	r2, r3, #2
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	0011      	movs	r1, r2
 8002730:	0018      	movs	r0, r3
 8002732:	f7ff ffdb 	bl	80026ec <LL_InitTick>
}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	b002      	add	sp, #8
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <LL_SetSystemCoreClock+0x18>)
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	601a      	str	r2, [r3, #0]
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	b002      	add	sp, #8
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	20000004 	.word	0x20000004

0800275c <sniprintf>:
 800275c:	b40c      	push	{r2, r3}
 800275e:	b530      	push	{r4, r5, lr}
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <sniprintf+0x64>)
 8002762:	000c      	movs	r4, r1
 8002764:	681d      	ldr	r5, [r3, #0]
 8002766:	b09d      	sub	sp, #116	; 0x74
 8002768:	2900      	cmp	r1, #0
 800276a:	da08      	bge.n	800277e <sniprintf+0x22>
 800276c:	238b      	movs	r3, #139	; 0x8b
 800276e:	2001      	movs	r0, #1
 8002770:	602b      	str	r3, [r5, #0]
 8002772:	4240      	negs	r0, r0
 8002774:	b01d      	add	sp, #116	; 0x74
 8002776:	bc30      	pop	{r4, r5}
 8002778:	bc08      	pop	{r3}
 800277a:	b002      	add	sp, #8
 800277c:	4718      	bx	r3
 800277e:	2382      	movs	r3, #130	; 0x82
 8002780:	466a      	mov	r2, sp
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	8293      	strh	r3, [r2, #20]
 8002786:	2300      	movs	r3, #0
 8002788:	9002      	str	r0, [sp, #8]
 800278a:	9006      	str	r0, [sp, #24]
 800278c:	4299      	cmp	r1, r3
 800278e:	d000      	beq.n	8002792 <sniprintf+0x36>
 8002790:	1e4b      	subs	r3, r1, #1
 8002792:	9304      	str	r3, [sp, #16]
 8002794:	9307      	str	r3, [sp, #28]
 8002796:	2301      	movs	r3, #1
 8002798:	466a      	mov	r2, sp
 800279a:	425b      	negs	r3, r3
 800279c:	82d3      	strh	r3, [r2, #22]
 800279e:	0028      	movs	r0, r5
 80027a0:	ab21      	add	r3, sp, #132	; 0x84
 80027a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80027a4:	a902      	add	r1, sp, #8
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	f000 f9a0 	bl	8002aec <_svfiprintf_r>
 80027ac:	1c43      	adds	r3, r0, #1
 80027ae:	da01      	bge.n	80027b4 <sniprintf+0x58>
 80027b0:	238b      	movs	r3, #139	; 0x8b
 80027b2:	602b      	str	r3, [r5, #0]
 80027b4:	2c00      	cmp	r4, #0
 80027b6:	d0dd      	beq.n	8002774 <sniprintf+0x18>
 80027b8:	2200      	movs	r2, #0
 80027ba:	9b02      	ldr	r3, [sp, #8]
 80027bc:	701a      	strb	r2, [r3, #0]
 80027be:	e7d9      	b.n	8002774 <sniprintf+0x18>
 80027c0:	20000054 	.word	0x20000054

080027c4 <memset>:
 80027c4:	0003      	movs	r3, r0
 80027c6:	1882      	adds	r2, r0, r2
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d100      	bne.n	80027ce <memset+0xa>
 80027cc:	4770      	bx	lr
 80027ce:	7019      	strb	r1, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	e7f9      	b.n	80027c8 <memset+0x4>

080027d4 <__errno>:
 80027d4:	4b01      	ldr	r3, [pc, #4]	; (80027dc <__errno+0x8>)
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	4770      	bx	lr
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	20000054 	.word	0x20000054

080027e0 <__libc_init_array>:
 80027e0:	b570      	push	{r4, r5, r6, lr}
 80027e2:	2600      	movs	r6, #0
 80027e4:	4c0c      	ldr	r4, [pc, #48]	; (8002818 <__libc_init_array+0x38>)
 80027e6:	4d0d      	ldr	r5, [pc, #52]	; (800281c <__libc_init_array+0x3c>)
 80027e8:	1b64      	subs	r4, r4, r5
 80027ea:	10a4      	asrs	r4, r4, #2
 80027ec:	42a6      	cmp	r6, r4
 80027ee:	d109      	bne.n	8002804 <__libc_init_array+0x24>
 80027f0:	2600      	movs	r6, #0
 80027f2:	f000 fc6d 	bl	80030d0 <_init>
 80027f6:	4c0a      	ldr	r4, [pc, #40]	; (8002820 <__libc_init_array+0x40>)
 80027f8:	4d0a      	ldr	r5, [pc, #40]	; (8002824 <__libc_init_array+0x44>)
 80027fa:	1b64      	subs	r4, r4, r5
 80027fc:	10a4      	asrs	r4, r4, #2
 80027fe:	42a6      	cmp	r6, r4
 8002800:	d105      	bne.n	800280e <__libc_init_array+0x2e>
 8002802:	bd70      	pop	{r4, r5, r6, pc}
 8002804:	00b3      	lsls	r3, r6, #2
 8002806:	58eb      	ldr	r3, [r5, r3]
 8002808:	4798      	blx	r3
 800280a:	3601      	adds	r6, #1
 800280c:	e7ee      	b.n	80027ec <__libc_init_array+0xc>
 800280e:	00b3      	lsls	r3, r6, #2
 8002810:	58eb      	ldr	r3, [r5, r3]
 8002812:	4798      	blx	r3
 8002814:	3601      	adds	r6, #1
 8002816:	e7f2      	b.n	80027fe <__libc_init_array+0x1e>
 8002818:	08003238 	.word	0x08003238
 800281c:	08003238 	.word	0x08003238
 8002820:	0800323c 	.word	0x0800323c
 8002824:	08003238 	.word	0x08003238

08002828 <__retarget_lock_acquire_recursive>:
 8002828:	4770      	bx	lr

0800282a <__retarget_lock_release_recursive>:
 800282a:	4770      	bx	lr

0800282c <_free_r>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	0005      	movs	r5, r0
 8002830:	2900      	cmp	r1, #0
 8002832:	d010      	beq.n	8002856 <_free_r+0x2a>
 8002834:	1f0c      	subs	r4, r1, #4
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	da00      	bge.n	800283e <_free_r+0x12>
 800283c:	18e4      	adds	r4, r4, r3
 800283e:	0028      	movs	r0, r5
 8002840:	f000 f8e2 	bl	8002a08 <__malloc_lock>
 8002844:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <_free_r+0x90>)
 8002846:	6813      	ldr	r3, [r2, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <_free_r+0x2c>
 800284c:	6063      	str	r3, [r4, #4]
 800284e:	6014      	str	r4, [r2, #0]
 8002850:	0028      	movs	r0, r5
 8002852:	f000 f8e1 	bl	8002a18 <__malloc_unlock>
 8002856:	bd70      	pop	{r4, r5, r6, pc}
 8002858:	42a3      	cmp	r3, r4
 800285a:	d908      	bls.n	800286e <_free_r+0x42>
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	1821      	adds	r1, r4, r0
 8002860:	428b      	cmp	r3, r1
 8002862:	d1f3      	bne.n	800284c <_free_r+0x20>
 8002864:	6819      	ldr	r1, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	1809      	adds	r1, r1, r0
 800286a:	6021      	str	r1, [r4, #0]
 800286c:	e7ee      	b.n	800284c <_free_r+0x20>
 800286e:	001a      	movs	r2, r3
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <_free_r+0x4e>
 8002876:	42a3      	cmp	r3, r4
 8002878:	d9f9      	bls.n	800286e <_free_r+0x42>
 800287a:	6811      	ldr	r1, [r2, #0]
 800287c:	1850      	adds	r0, r2, r1
 800287e:	42a0      	cmp	r0, r4
 8002880:	d10b      	bne.n	800289a <_free_r+0x6e>
 8002882:	6820      	ldr	r0, [r4, #0]
 8002884:	1809      	adds	r1, r1, r0
 8002886:	1850      	adds	r0, r2, r1
 8002888:	6011      	str	r1, [r2, #0]
 800288a:	4283      	cmp	r3, r0
 800288c:	d1e0      	bne.n	8002850 <_free_r+0x24>
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	1841      	adds	r1, r0, r1
 8002894:	6011      	str	r1, [r2, #0]
 8002896:	6053      	str	r3, [r2, #4]
 8002898:	e7da      	b.n	8002850 <_free_r+0x24>
 800289a:	42a0      	cmp	r0, r4
 800289c:	d902      	bls.n	80028a4 <_free_r+0x78>
 800289e:	230c      	movs	r3, #12
 80028a0:	602b      	str	r3, [r5, #0]
 80028a2:	e7d5      	b.n	8002850 <_free_r+0x24>
 80028a4:	6820      	ldr	r0, [r4, #0]
 80028a6:	1821      	adds	r1, r4, r0
 80028a8:	428b      	cmp	r3, r1
 80028aa:	d103      	bne.n	80028b4 <_free_r+0x88>
 80028ac:	6819      	ldr	r1, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	1809      	adds	r1, r1, r0
 80028b2:	6021      	str	r1, [r4, #0]
 80028b4:	6063      	str	r3, [r4, #4]
 80028b6:	6054      	str	r4, [r2, #4]
 80028b8:	e7ca      	b.n	8002850 <_free_r+0x24>
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	200001bc 	.word	0x200001bc

080028c0 <sbrk_aligned>:
 80028c0:	b570      	push	{r4, r5, r6, lr}
 80028c2:	4e0f      	ldr	r6, [pc, #60]	; (8002900 <sbrk_aligned+0x40>)
 80028c4:	000d      	movs	r5, r1
 80028c6:	6831      	ldr	r1, [r6, #0]
 80028c8:	0004      	movs	r4, r0
 80028ca:	2900      	cmp	r1, #0
 80028cc:	d102      	bne.n	80028d4 <sbrk_aligned+0x14>
 80028ce:	f000 fba1 	bl	8003014 <_sbrk_r>
 80028d2:	6030      	str	r0, [r6, #0]
 80028d4:	0029      	movs	r1, r5
 80028d6:	0020      	movs	r0, r4
 80028d8:	f000 fb9c 	bl	8003014 <_sbrk_r>
 80028dc:	1c43      	adds	r3, r0, #1
 80028de:	d00a      	beq.n	80028f6 <sbrk_aligned+0x36>
 80028e0:	2303      	movs	r3, #3
 80028e2:	1cc5      	adds	r5, r0, #3
 80028e4:	439d      	bics	r5, r3
 80028e6:	42a8      	cmp	r0, r5
 80028e8:	d007      	beq.n	80028fa <sbrk_aligned+0x3a>
 80028ea:	1a29      	subs	r1, r5, r0
 80028ec:	0020      	movs	r0, r4
 80028ee:	f000 fb91 	bl	8003014 <_sbrk_r>
 80028f2:	3001      	adds	r0, #1
 80028f4:	d101      	bne.n	80028fa <sbrk_aligned+0x3a>
 80028f6:	2501      	movs	r5, #1
 80028f8:	426d      	negs	r5, r5
 80028fa:	0028      	movs	r0, r5
 80028fc:	bd70      	pop	{r4, r5, r6, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	200001c0 	.word	0x200001c0

08002904 <_malloc_r>:
 8002904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002906:	2203      	movs	r2, #3
 8002908:	1ccb      	adds	r3, r1, #3
 800290a:	4393      	bics	r3, r2
 800290c:	3308      	adds	r3, #8
 800290e:	0006      	movs	r6, r0
 8002910:	001f      	movs	r7, r3
 8002912:	2b0c      	cmp	r3, #12
 8002914:	d238      	bcs.n	8002988 <_malloc_r+0x84>
 8002916:	270c      	movs	r7, #12
 8002918:	42b9      	cmp	r1, r7
 800291a:	d837      	bhi.n	800298c <_malloc_r+0x88>
 800291c:	0030      	movs	r0, r6
 800291e:	f000 f873 	bl	8002a08 <__malloc_lock>
 8002922:	4b38      	ldr	r3, [pc, #224]	; (8002a04 <_malloc_r+0x100>)
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	001c      	movs	r4, r3
 800292a:	2c00      	cmp	r4, #0
 800292c:	d133      	bne.n	8002996 <_malloc_r+0x92>
 800292e:	0039      	movs	r1, r7
 8002930:	0030      	movs	r0, r6
 8002932:	f7ff ffc5 	bl	80028c0 <sbrk_aligned>
 8002936:	0004      	movs	r4, r0
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	d15e      	bne.n	80029fa <_malloc_r+0xf6>
 800293c:	9b00      	ldr	r3, [sp, #0]
 800293e:	681c      	ldr	r4, [r3, #0]
 8002940:	0025      	movs	r5, r4
 8002942:	2d00      	cmp	r5, #0
 8002944:	d14e      	bne.n	80029e4 <_malloc_r+0xe0>
 8002946:	2c00      	cmp	r4, #0
 8002948:	d051      	beq.n	80029ee <_malloc_r+0xea>
 800294a:	6823      	ldr	r3, [r4, #0]
 800294c:	0029      	movs	r1, r5
 800294e:	18e3      	adds	r3, r4, r3
 8002950:	0030      	movs	r0, r6
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	f000 fb5e 	bl	8003014 <_sbrk_r>
 8002958:	9b01      	ldr	r3, [sp, #4]
 800295a:	4283      	cmp	r3, r0
 800295c:	d147      	bne.n	80029ee <_malloc_r+0xea>
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	0030      	movs	r0, r6
 8002962:	1aff      	subs	r7, r7, r3
 8002964:	0039      	movs	r1, r7
 8002966:	f7ff ffab 	bl	80028c0 <sbrk_aligned>
 800296a:	3001      	adds	r0, #1
 800296c:	d03f      	beq.n	80029ee <_malloc_r+0xea>
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	19db      	adds	r3, r3, r7
 8002972:	6023      	str	r3, [r4, #0]
 8002974:	9b00      	ldr	r3, [sp, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d040      	beq.n	80029fe <_malloc_r+0xfa>
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	42a2      	cmp	r2, r4
 8002980:	d133      	bne.n	80029ea <_malloc_r+0xe6>
 8002982:	2200      	movs	r2, #0
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	e014      	b.n	80029b2 <_malloc_r+0xae>
 8002988:	2b00      	cmp	r3, #0
 800298a:	dac5      	bge.n	8002918 <_malloc_r+0x14>
 800298c:	230c      	movs	r3, #12
 800298e:	2500      	movs	r5, #0
 8002990:	6033      	str	r3, [r6, #0]
 8002992:	0028      	movs	r0, r5
 8002994:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002996:	6821      	ldr	r1, [r4, #0]
 8002998:	1bc9      	subs	r1, r1, r7
 800299a:	d420      	bmi.n	80029de <_malloc_r+0xda>
 800299c:	290b      	cmp	r1, #11
 800299e:	d918      	bls.n	80029d2 <_malloc_r+0xce>
 80029a0:	19e2      	adds	r2, r4, r7
 80029a2:	6027      	str	r7, [r4, #0]
 80029a4:	42a3      	cmp	r3, r4
 80029a6:	d112      	bne.n	80029ce <_malloc_r+0xca>
 80029a8:	9b00      	ldr	r3, [sp, #0]
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	6863      	ldr	r3, [r4, #4]
 80029ae:	6011      	str	r1, [r2, #0]
 80029b0:	6053      	str	r3, [r2, #4]
 80029b2:	0030      	movs	r0, r6
 80029b4:	0025      	movs	r5, r4
 80029b6:	f000 f82f 	bl	8002a18 <__malloc_unlock>
 80029ba:	2207      	movs	r2, #7
 80029bc:	350b      	adds	r5, #11
 80029be:	1d23      	adds	r3, r4, #4
 80029c0:	4395      	bics	r5, r2
 80029c2:	1aea      	subs	r2, r5, r3
 80029c4:	429d      	cmp	r5, r3
 80029c6:	d0e4      	beq.n	8002992 <_malloc_r+0x8e>
 80029c8:	1b5b      	subs	r3, r3, r5
 80029ca:	50a3      	str	r3, [r4, r2]
 80029cc:	e7e1      	b.n	8002992 <_malloc_r+0x8e>
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	e7ec      	b.n	80029ac <_malloc_r+0xa8>
 80029d2:	6862      	ldr	r2, [r4, #4]
 80029d4:	42a3      	cmp	r3, r4
 80029d6:	d1d5      	bne.n	8002984 <_malloc_r+0x80>
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e7e9      	b.n	80029b2 <_malloc_r+0xae>
 80029de:	0023      	movs	r3, r4
 80029e0:	6864      	ldr	r4, [r4, #4]
 80029e2:	e7a2      	b.n	800292a <_malloc_r+0x26>
 80029e4:	002c      	movs	r4, r5
 80029e6:	686d      	ldr	r5, [r5, #4]
 80029e8:	e7ab      	b.n	8002942 <_malloc_r+0x3e>
 80029ea:	0013      	movs	r3, r2
 80029ec:	e7c4      	b.n	8002978 <_malloc_r+0x74>
 80029ee:	230c      	movs	r3, #12
 80029f0:	0030      	movs	r0, r6
 80029f2:	6033      	str	r3, [r6, #0]
 80029f4:	f000 f810 	bl	8002a18 <__malloc_unlock>
 80029f8:	e7cb      	b.n	8002992 <_malloc_r+0x8e>
 80029fa:	6027      	str	r7, [r4, #0]
 80029fc:	e7d9      	b.n	80029b2 <_malloc_r+0xae>
 80029fe:	605b      	str	r3, [r3, #4]
 8002a00:	deff      	udf	#255	; 0xff
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	200001bc 	.word	0x200001bc

08002a08 <__malloc_lock>:
 8002a08:	b510      	push	{r4, lr}
 8002a0a:	4802      	ldr	r0, [pc, #8]	; (8002a14 <__malloc_lock+0xc>)
 8002a0c:	f7ff ff0c 	bl	8002828 <__retarget_lock_acquire_recursive>
 8002a10:	bd10      	pop	{r4, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	200001b8 	.word	0x200001b8

08002a18 <__malloc_unlock>:
 8002a18:	b510      	push	{r4, lr}
 8002a1a:	4802      	ldr	r0, [pc, #8]	; (8002a24 <__malloc_unlock+0xc>)
 8002a1c:	f7ff ff05 	bl	800282a <__retarget_lock_release_recursive>
 8002a20:	bd10      	pop	{r4, pc}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	200001b8 	.word	0x200001b8

08002a28 <__ssputs_r>:
 8002a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	9301      	str	r3, [sp, #4]
 8002a2e:	9203      	str	r2, [sp, #12]
 8002a30:	688e      	ldr	r6, [r1, #8]
 8002a32:	9a01      	ldr	r2, [sp, #4]
 8002a34:	0007      	movs	r7, r0
 8002a36:	000c      	movs	r4, r1
 8002a38:	680b      	ldr	r3, [r1, #0]
 8002a3a:	4296      	cmp	r6, r2
 8002a3c:	d831      	bhi.n	8002aa2 <__ssputs_r+0x7a>
 8002a3e:	898a      	ldrh	r2, [r1, #12]
 8002a40:	2190      	movs	r1, #144	; 0x90
 8002a42:	00c9      	lsls	r1, r1, #3
 8002a44:	420a      	tst	r2, r1
 8002a46:	d029      	beq.n	8002a9c <__ssputs_r+0x74>
 8002a48:	2003      	movs	r0, #3
 8002a4a:	6921      	ldr	r1, [r4, #16]
 8002a4c:	1a5b      	subs	r3, r3, r1
 8002a4e:	9302      	str	r3, [sp, #8]
 8002a50:	6963      	ldr	r3, [r4, #20]
 8002a52:	4343      	muls	r3, r0
 8002a54:	0fdd      	lsrs	r5, r3, #31
 8002a56:	18ed      	adds	r5, r5, r3
 8002a58:	9b01      	ldr	r3, [sp, #4]
 8002a5a:	9802      	ldr	r0, [sp, #8]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	181b      	adds	r3, r3, r0
 8002a60:	106d      	asrs	r5, r5, #1
 8002a62:	42ab      	cmp	r3, r5
 8002a64:	d900      	bls.n	8002a68 <__ssputs_r+0x40>
 8002a66:	001d      	movs	r5, r3
 8002a68:	0552      	lsls	r2, r2, #21
 8002a6a:	d529      	bpl.n	8002ac0 <__ssputs_r+0x98>
 8002a6c:	0029      	movs	r1, r5
 8002a6e:	0038      	movs	r0, r7
 8002a70:	f7ff ff48 	bl	8002904 <_malloc_r>
 8002a74:	1e06      	subs	r6, r0, #0
 8002a76:	d02d      	beq.n	8002ad4 <__ssputs_r+0xac>
 8002a78:	9a02      	ldr	r2, [sp, #8]
 8002a7a:	6921      	ldr	r1, [r4, #16]
 8002a7c:	f000 fae7 	bl	800304e <memcpy>
 8002a80:	89a2      	ldrh	r2, [r4, #12]
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <__ssputs_r+0xc0>)
 8002a84:	401a      	ands	r2, r3
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	81a3      	strh	r3, [r4, #12]
 8002a8c:	9b02      	ldr	r3, [sp, #8]
 8002a8e:	6126      	str	r6, [r4, #16]
 8002a90:	18f6      	adds	r6, r6, r3
 8002a92:	6026      	str	r6, [r4, #0]
 8002a94:	6165      	str	r5, [r4, #20]
 8002a96:	9e01      	ldr	r6, [sp, #4]
 8002a98:	1aed      	subs	r5, r5, r3
 8002a9a:	60a5      	str	r5, [r4, #8]
 8002a9c:	9b01      	ldr	r3, [sp, #4]
 8002a9e:	429e      	cmp	r6, r3
 8002aa0:	d900      	bls.n	8002aa4 <__ssputs_r+0x7c>
 8002aa2:	9e01      	ldr	r6, [sp, #4]
 8002aa4:	0032      	movs	r2, r6
 8002aa6:	9903      	ldr	r1, [sp, #12]
 8002aa8:	6820      	ldr	r0, [r4, #0]
 8002aaa:	f000 fa9f 	bl	8002fec <memmove>
 8002aae:	2000      	movs	r0, #0
 8002ab0:	68a3      	ldr	r3, [r4, #8]
 8002ab2:	1b9b      	subs	r3, r3, r6
 8002ab4:	60a3      	str	r3, [r4, #8]
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	199b      	adds	r3, r3, r6
 8002aba:	6023      	str	r3, [r4, #0]
 8002abc:	b005      	add	sp, #20
 8002abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ac0:	002a      	movs	r2, r5
 8002ac2:	0038      	movs	r0, r7
 8002ac4:	f000 facc 	bl	8003060 <_realloc_r>
 8002ac8:	1e06      	subs	r6, r0, #0
 8002aca:	d1df      	bne.n	8002a8c <__ssputs_r+0x64>
 8002acc:	0038      	movs	r0, r7
 8002ace:	6921      	ldr	r1, [r4, #16]
 8002ad0:	f7ff feac 	bl	800282c <_free_r>
 8002ad4:	230c      	movs	r3, #12
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	603b      	str	r3, [r7, #0]
 8002ada:	89a2      	ldrh	r2, [r4, #12]
 8002adc:	3334      	adds	r3, #52	; 0x34
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	81a3      	strh	r3, [r4, #12]
 8002ae2:	4240      	negs	r0, r0
 8002ae4:	e7ea      	b.n	8002abc <__ssputs_r+0x94>
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	fffffb7f 	.word	0xfffffb7f

08002aec <_svfiprintf_r>:
 8002aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aee:	b0a1      	sub	sp, #132	; 0x84
 8002af0:	9003      	str	r0, [sp, #12]
 8002af2:	001d      	movs	r5, r3
 8002af4:	898b      	ldrh	r3, [r1, #12]
 8002af6:	000f      	movs	r7, r1
 8002af8:	0016      	movs	r6, r2
 8002afa:	061b      	lsls	r3, r3, #24
 8002afc:	d511      	bpl.n	8002b22 <_svfiprintf_r+0x36>
 8002afe:	690b      	ldr	r3, [r1, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10e      	bne.n	8002b22 <_svfiprintf_r+0x36>
 8002b04:	2140      	movs	r1, #64	; 0x40
 8002b06:	f7ff fefd 	bl	8002904 <_malloc_r>
 8002b0a:	6038      	str	r0, [r7, #0]
 8002b0c:	6138      	str	r0, [r7, #16]
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d105      	bne.n	8002b1e <_svfiprintf_r+0x32>
 8002b12:	230c      	movs	r3, #12
 8002b14:	9a03      	ldr	r2, [sp, #12]
 8002b16:	3801      	subs	r0, #1
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	b021      	add	sp, #132	; 0x84
 8002b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b1e:	2340      	movs	r3, #64	; 0x40
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	2300      	movs	r3, #0
 8002b24:	ac08      	add	r4, sp, #32
 8002b26:	6163      	str	r3, [r4, #20]
 8002b28:	3320      	adds	r3, #32
 8002b2a:	7663      	strb	r3, [r4, #25]
 8002b2c:	3310      	adds	r3, #16
 8002b2e:	76a3      	strb	r3, [r4, #26]
 8002b30:	9507      	str	r5, [sp, #28]
 8002b32:	0035      	movs	r5, r6
 8002b34:	782b      	ldrb	r3, [r5, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <_svfiprintf_r+0x52>
 8002b3a:	2b25      	cmp	r3, #37	; 0x25
 8002b3c:	d148      	bne.n	8002bd0 <_svfiprintf_r+0xe4>
 8002b3e:	1bab      	subs	r3, r5, r6
 8002b40:	9305      	str	r3, [sp, #20]
 8002b42:	42b5      	cmp	r5, r6
 8002b44:	d00b      	beq.n	8002b5e <_svfiprintf_r+0x72>
 8002b46:	0032      	movs	r2, r6
 8002b48:	0039      	movs	r1, r7
 8002b4a:	9803      	ldr	r0, [sp, #12]
 8002b4c:	f7ff ff6c 	bl	8002a28 <__ssputs_r>
 8002b50:	3001      	adds	r0, #1
 8002b52:	d100      	bne.n	8002b56 <_svfiprintf_r+0x6a>
 8002b54:	e0af      	b.n	8002cb6 <_svfiprintf_r+0x1ca>
 8002b56:	6963      	ldr	r3, [r4, #20]
 8002b58:	9a05      	ldr	r2, [sp, #20]
 8002b5a:	189b      	adds	r3, r3, r2
 8002b5c:	6163      	str	r3, [r4, #20]
 8002b5e:	782b      	ldrb	r3, [r5, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d100      	bne.n	8002b66 <_svfiprintf_r+0x7a>
 8002b64:	e0a7      	b.n	8002cb6 <_svfiprintf_r+0x1ca>
 8002b66:	2201      	movs	r2, #1
 8002b68:	2300      	movs	r3, #0
 8002b6a:	4252      	negs	r2, r2
 8002b6c:	6062      	str	r2, [r4, #4]
 8002b6e:	a904      	add	r1, sp, #16
 8002b70:	3254      	adds	r2, #84	; 0x54
 8002b72:	1852      	adds	r2, r2, r1
 8002b74:	1c6e      	adds	r6, r5, #1
 8002b76:	6023      	str	r3, [r4, #0]
 8002b78:	60e3      	str	r3, [r4, #12]
 8002b7a:	60a3      	str	r3, [r4, #8]
 8002b7c:	7013      	strb	r3, [r2, #0]
 8002b7e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002b80:	4b55      	ldr	r3, [pc, #340]	; (8002cd8 <_svfiprintf_r+0x1ec>)
 8002b82:	2205      	movs	r2, #5
 8002b84:	0018      	movs	r0, r3
 8002b86:	7831      	ldrb	r1, [r6, #0]
 8002b88:	9305      	str	r3, [sp, #20]
 8002b8a:	f000 fa55 	bl	8003038 <memchr>
 8002b8e:	1c75      	adds	r5, r6, #1
 8002b90:	2800      	cmp	r0, #0
 8002b92:	d11f      	bne.n	8002bd4 <_svfiprintf_r+0xe8>
 8002b94:	6822      	ldr	r2, [r4, #0]
 8002b96:	06d3      	lsls	r3, r2, #27
 8002b98:	d504      	bpl.n	8002ba4 <_svfiprintf_r+0xb8>
 8002b9a:	2353      	movs	r3, #83	; 0x53
 8002b9c:	a904      	add	r1, sp, #16
 8002b9e:	185b      	adds	r3, r3, r1
 8002ba0:	2120      	movs	r1, #32
 8002ba2:	7019      	strb	r1, [r3, #0]
 8002ba4:	0713      	lsls	r3, r2, #28
 8002ba6:	d504      	bpl.n	8002bb2 <_svfiprintf_r+0xc6>
 8002ba8:	2353      	movs	r3, #83	; 0x53
 8002baa:	a904      	add	r1, sp, #16
 8002bac:	185b      	adds	r3, r3, r1
 8002bae:	212b      	movs	r1, #43	; 0x2b
 8002bb0:	7019      	strb	r1, [r3, #0]
 8002bb2:	7833      	ldrb	r3, [r6, #0]
 8002bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8002bb6:	d016      	beq.n	8002be6 <_svfiprintf_r+0xfa>
 8002bb8:	0035      	movs	r5, r6
 8002bba:	2100      	movs	r1, #0
 8002bbc:	200a      	movs	r0, #10
 8002bbe:	68e3      	ldr	r3, [r4, #12]
 8002bc0:	782a      	ldrb	r2, [r5, #0]
 8002bc2:	1c6e      	adds	r6, r5, #1
 8002bc4:	3a30      	subs	r2, #48	; 0x30
 8002bc6:	2a09      	cmp	r2, #9
 8002bc8:	d94e      	bls.n	8002c68 <_svfiprintf_r+0x17c>
 8002bca:	2900      	cmp	r1, #0
 8002bcc:	d111      	bne.n	8002bf2 <_svfiprintf_r+0x106>
 8002bce:	e017      	b.n	8002c00 <_svfiprintf_r+0x114>
 8002bd0:	3501      	adds	r5, #1
 8002bd2:	e7af      	b.n	8002b34 <_svfiprintf_r+0x48>
 8002bd4:	9b05      	ldr	r3, [sp, #20]
 8002bd6:	6822      	ldr	r2, [r4, #0]
 8002bd8:	1ac0      	subs	r0, r0, r3
 8002bda:	2301      	movs	r3, #1
 8002bdc:	4083      	lsls	r3, r0
 8002bde:	4313      	orrs	r3, r2
 8002be0:	002e      	movs	r6, r5
 8002be2:	6023      	str	r3, [r4, #0]
 8002be4:	e7cc      	b.n	8002b80 <_svfiprintf_r+0x94>
 8002be6:	9b07      	ldr	r3, [sp, #28]
 8002be8:	1d19      	adds	r1, r3, #4
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	9107      	str	r1, [sp, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db01      	blt.n	8002bf6 <_svfiprintf_r+0x10a>
 8002bf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8002bf4:	e004      	b.n	8002c00 <_svfiprintf_r+0x114>
 8002bf6:	425b      	negs	r3, r3
 8002bf8:	60e3      	str	r3, [r4, #12]
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	6023      	str	r3, [r4, #0]
 8002c00:	782b      	ldrb	r3, [r5, #0]
 8002c02:	2b2e      	cmp	r3, #46	; 0x2e
 8002c04:	d10a      	bne.n	8002c1c <_svfiprintf_r+0x130>
 8002c06:	786b      	ldrb	r3, [r5, #1]
 8002c08:	2b2a      	cmp	r3, #42	; 0x2a
 8002c0a:	d135      	bne.n	8002c78 <_svfiprintf_r+0x18c>
 8002c0c:	9b07      	ldr	r3, [sp, #28]
 8002c0e:	3502      	adds	r5, #2
 8002c10:	1d1a      	adds	r2, r3, #4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	9207      	str	r2, [sp, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	db2b      	blt.n	8002c72 <_svfiprintf_r+0x186>
 8002c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c1c:	4e2f      	ldr	r6, [pc, #188]	; (8002cdc <_svfiprintf_r+0x1f0>)
 8002c1e:	2203      	movs	r2, #3
 8002c20:	0030      	movs	r0, r6
 8002c22:	7829      	ldrb	r1, [r5, #0]
 8002c24:	f000 fa08 	bl	8003038 <memchr>
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	d006      	beq.n	8002c3a <_svfiprintf_r+0x14e>
 8002c2c:	2340      	movs	r3, #64	; 0x40
 8002c2e:	1b80      	subs	r0, r0, r6
 8002c30:	4083      	lsls	r3, r0
 8002c32:	6822      	ldr	r2, [r4, #0]
 8002c34:	3501      	adds	r5, #1
 8002c36:	4313      	orrs	r3, r2
 8002c38:	6023      	str	r3, [r4, #0]
 8002c3a:	7829      	ldrb	r1, [r5, #0]
 8002c3c:	2206      	movs	r2, #6
 8002c3e:	4828      	ldr	r0, [pc, #160]	; (8002ce0 <_svfiprintf_r+0x1f4>)
 8002c40:	1c6e      	adds	r6, r5, #1
 8002c42:	7621      	strb	r1, [r4, #24]
 8002c44:	f000 f9f8 	bl	8003038 <memchr>
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	d03c      	beq.n	8002cc6 <_svfiprintf_r+0x1da>
 8002c4c:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <_svfiprintf_r+0x1f8>)
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d125      	bne.n	8002c9e <_svfiprintf_r+0x1b2>
 8002c52:	2207      	movs	r2, #7
 8002c54:	9b07      	ldr	r3, [sp, #28]
 8002c56:	3307      	adds	r3, #7
 8002c58:	4393      	bics	r3, r2
 8002c5a:	3308      	adds	r3, #8
 8002c5c:	9307      	str	r3, [sp, #28]
 8002c5e:	6963      	ldr	r3, [r4, #20]
 8002c60:	9a04      	ldr	r2, [sp, #16]
 8002c62:	189b      	adds	r3, r3, r2
 8002c64:	6163      	str	r3, [r4, #20]
 8002c66:	e764      	b.n	8002b32 <_svfiprintf_r+0x46>
 8002c68:	4343      	muls	r3, r0
 8002c6a:	0035      	movs	r5, r6
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	189b      	adds	r3, r3, r2
 8002c70:	e7a6      	b.n	8002bc0 <_svfiprintf_r+0xd4>
 8002c72:	2301      	movs	r3, #1
 8002c74:	425b      	negs	r3, r3
 8002c76:	e7d0      	b.n	8002c1a <_svfiprintf_r+0x12e>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	200a      	movs	r0, #10
 8002c7c:	001a      	movs	r2, r3
 8002c7e:	3501      	adds	r5, #1
 8002c80:	6063      	str	r3, [r4, #4]
 8002c82:	7829      	ldrb	r1, [r5, #0]
 8002c84:	1c6e      	adds	r6, r5, #1
 8002c86:	3930      	subs	r1, #48	; 0x30
 8002c88:	2909      	cmp	r1, #9
 8002c8a:	d903      	bls.n	8002c94 <_svfiprintf_r+0x1a8>
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0c5      	beq.n	8002c1c <_svfiprintf_r+0x130>
 8002c90:	9209      	str	r2, [sp, #36]	; 0x24
 8002c92:	e7c3      	b.n	8002c1c <_svfiprintf_r+0x130>
 8002c94:	4342      	muls	r2, r0
 8002c96:	0035      	movs	r5, r6
 8002c98:	2301      	movs	r3, #1
 8002c9a:	1852      	adds	r2, r2, r1
 8002c9c:	e7f1      	b.n	8002c82 <_svfiprintf_r+0x196>
 8002c9e:	aa07      	add	r2, sp, #28
 8002ca0:	9200      	str	r2, [sp, #0]
 8002ca2:	0021      	movs	r1, r4
 8002ca4:	003a      	movs	r2, r7
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <_svfiprintf_r+0x1fc>)
 8002ca8:	9803      	ldr	r0, [sp, #12]
 8002caa:	e000      	b.n	8002cae <_svfiprintf_r+0x1c2>
 8002cac:	bf00      	nop
 8002cae:	9004      	str	r0, [sp, #16]
 8002cb0:	9b04      	ldr	r3, [sp, #16]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	d1d3      	bne.n	8002c5e <_svfiprintf_r+0x172>
 8002cb6:	89bb      	ldrh	r3, [r7, #12]
 8002cb8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002cba:	065b      	lsls	r3, r3, #25
 8002cbc:	d400      	bmi.n	8002cc0 <_svfiprintf_r+0x1d4>
 8002cbe:	e72c      	b.n	8002b1a <_svfiprintf_r+0x2e>
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	4240      	negs	r0, r0
 8002cc4:	e729      	b.n	8002b1a <_svfiprintf_r+0x2e>
 8002cc6:	aa07      	add	r2, sp, #28
 8002cc8:	9200      	str	r2, [sp, #0]
 8002cca:	0021      	movs	r1, r4
 8002ccc:	003a      	movs	r2, r7
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <_svfiprintf_r+0x1fc>)
 8002cd0:	9803      	ldr	r0, [sp, #12]
 8002cd2:	f000 f87b 	bl	8002dcc <_printf_i>
 8002cd6:	e7ea      	b.n	8002cae <_svfiprintf_r+0x1c2>
 8002cd8:	08003205 	.word	0x08003205
 8002cdc:	0800320b 	.word	0x0800320b
 8002ce0:	0800320f 	.word	0x0800320f
 8002ce4:	00000000 	.word	0x00000000
 8002ce8:	08002a29 	.word	0x08002a29

08002cec <_printf_common>:
 8002cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cee:	0016      	movs	r6, r2
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	688a      	ldr	r2, [r1, #8]
 8002cf4:	690b      	ldr	r3, [r1, #16]
 8002cf6:	000c      	movs	r4, r1
 8002cf8:	9000      	str	r0, [sp, #0]
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	da00      	bge.n	8002d00 <_printf_common+0x14>
 8002cfe:	0013      	movs	r3, r2
 8002d00:	0022      	movs	r2, r4
 8002d02:	6033      	str	r3, [r6, #0]
 8002d04:	3243      	adds	r2, #67	; 0x43
 8002d06:	7812      	ldrb	r2, [r2, #0]
 8002d08:	2a00      	cmp	r2, #0
 8002d0a:	d001      	beq.n	8002d10 <_printf_common+0x24>
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	6033      	str	r3, [r6, #0]
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	069b      	lsls	r3, r3, #26
 8002d14:	d502      	bpl.n	8002d1c <_printf_common+0x30>
 8002d16:	6833      	ldr	r3, [r6, #0]
 8002d18:	3302      	adds	r3, #2
 8002d1a:	6033      	str	r3, [r6, #0]
 8002d1c:	6822      	ldr	r2, [r4, #0]
 8002d1e:	2306      	movs	r3, #6
 8002d20:	0015      	movs	r5, r2
 8002d22:	401d      	ands	r5, r3
 8002d24:	421a      	tst	r2, r3
 8002d26:	d027      	beq.n	8002d78 <_printf_common+0x8c>
 8002d28:	0023      	movs	r3, r4
 8002d2a:	3343      	adds	r3, #67	; 0x43
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	1e5a      	subs	r2, r3, #1
 8002d30:	4193      	sbcs	r3, r2
 8002d32:	6822      	ldr	r2, [r4, #0]
 8002d34:	0692      	lsls	r2, r2, #26
 8002d36:	d430      	bmi.n	8002d9a <_printf_common+0xae>
 8002d38:	0022      	movs	r2, r4
 8002d3a:	9901      	ldr	r1, [sp, #4]
 8002d3c:	9800      	ldr	r0, [sp, #0]
 8002d3e:	9d08      	ldr	r5, [sp, #32]
 8002d40:	3243      	adds	r2, #67	; 0x43
 8002d42:	47a8      	blx	r5
 8002d44:	3001      	adds	r0, #1
 8002d46:	d025      	beq.n	8002d94 <_printf_common+0xa8>
 8002d48:	2206      	movs	r2, #6
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	2500      	movs	r5, #0
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d105      	bne.n	8002d60 <_printf_common+0x74>
 8002d54:	6833      	ldr	r3, [r6, #0]
 8002d56:	68e5      	ldr	r5, [r4, #12]
 8002d58:	1aed      	subs	r5, r5, r3
 8002d5a:	43eb      	mvns	r3, r5
 8002d5c:	17db      	asrs	r3, r3, #31
 8002d5e:	401d      	ands	r5, r3
 8002d60:	68a3      	ldr	r3, [r4, #8]
 8002d62:	6922      	ldr	r2, [r4, #16]
 8002d64:	4293      	cmp	r3, r2
 8002d66:	dd01      	ble.n	8002d6c <_printf_common+0x80>
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	18ed      	adds	r5, r5, r3
 8002d6c:	2600      	movs	r6, #0
 8002d6e:	42b5      	cmp	r5, r6
 8002d70:	d120      	bne.n	8002db4 <_printf_common+0xc8>
 8002d72:	2000      	movs	r0, #0
 8002d74:	e010      	b.n	8002d98 <_printf_common+0xac>
 8002d76:	3501      	adds	r5, #1
 8002d78:	68e3      	ldr	r3, [r4, #12]
 8002d7a:	6832      	ldr	r2, [r6, #0]
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	42ab      	cmp	r3, r5
 8002d80:	ddd2      	ble.n	8002d28 <_printf_common+0x3c>
 8002d82:	0022      	movs	r2, r4
 8002d84:	2301      	movs	r3, #1
 8002d86:	9901      	ldr	r1, [sp, #4]
 8002d88:	9800      	ldr	r0, [sp, #0]
 8002d8a:	9f08      	ldr	r7, [sp, #32]
 8002d8c:	3219      	adds	r2, #25
 8002d8e:	47b8      	blx	r7
 8002d90:	3001      	adds	r0, #1
 8002d92:	d1f0      	bne.n	8002d76 <_printf_common+0x8a>
 8002d94:	2001      	movs	r0, #1
 8002d96:	4240      	negs	r0, r0
 8002d98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d9a:	2030      	movs	r0, #48	; 0x30
 8002d9c:	18e1      	adds	r1, r4, r3
 8002d9e:	3143      	adds	r1, #67	; 0x43
 8002da0:	7008      	strb	r0, [r1, #0]
 8002da2:	0021      	movs	r1, r4
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	3145      	adds	r1, #69	; 0x45
 8002da8:	7809      	ldrb	r1, [r1, #0]
 8002daa:	18a2      	adds	r2, r4, r2
 8002dac:	3243      	adds	r2, #67	; 0x43
 8002dae:	3302      	adds	r3, #2
 8002db0:	7011      	strb	r1, [r2, #0]
 8002db2:	e7c1      	b.n	8002d38 <_printf_common+0x4c>
 8002db4:	0022      	movs	r2, r4
 8002db6:	2301      	movs	r3, #1
 8002db8:	9901      	ldr	r1, [sp, #4]
 8002dba:	9800      	ldr	r0, [sp, #0]
 8002dbc:	9f08      	ldr	r7, [sp, #32]
 8002dbe:	321a      	adds	r2, #26
 8002dc0:	47b8      	blx	r7
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	d0e6      	beq.n	8002d94 <_printf_common+0xa8>
 8002dc6:	3601      	adds	r6, #1
 8002dc8:	e7d1      	b.n	8002d6e <_printf_common+0x82>
	...

08002dcc <_printf_i>:
 8002dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dce:	b08b      	sub	sp, #44	; 0x2c
 8002dd0:	9206      	str	r2, [sp, #24]
 8002dd2:	000a      	movs	r2, r1
 8002dd4:	3243      	adds	r2, #67	; 0x43
 8002dd6:	9307      	str	r3, [sp, #28]
 8002dd8:	9005      	str	r0, [sp, #20]
 8002dda:	9204      	str	r2, [sp, #16]
 8002ddc:	7e0a      	ldrb	r2, [r1, #24]
 8002dde:	000c      	movs	r4, r1
 8002de0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002de2:	2a78      	cmp	r2, #120	; 0x78
 8002de4:	d809      	bhi.n	8002dfa <_printf_i+0x2e>
 8002de6:	2a62      	cmp	r2, #98	; 0x62
 8002de8:	d80b      	bhi.n	8002e02 <_printf_i+0x36>
 8002dea:	2a00      	cmp	r2, #0
 8002dec:	d100      	bne.n	8002df0 <_printf_i+0x24>
 8002dee:	e0be      	b.n	8002f6e <_printf_i+0x1a2>
 8002df0:	497c      	ldr	r1, [pc, #496]	; (8002fe4 <_printf_i+0x218>)
 8002df2:	9103      	str	r1, [sp, #12]
 8002df4:	2a58      	cmp	r2, #88	; 0x58
 8002df6:	d100      	bne.n	8002dfa <_printf_i+0x2e>
 8002df8:	e093      	b.n	8002f22 <_printf_i+0x156>
 8002dfa:	0026      	movs	r6, r4
 8002dfc:	3642      	adds	r6, #66	; 0x42
 8002dfe:	7032      	strb	r2, [r6, #0]
 8002e00:	e022      	b.n	8002e48 <_printf_i+0x7c>
 8002e02:	0010      	movs	r0, r2
 8002e04:	3863      	subs	r0, #99	; 0x63
 8002e06:	2815      	cmp	r0, #21
 8002e08:	d8f7      	bhi.n	8002dfa <_printf_i+0x2e>
 8002e0a:	f7fd f97d 	bl	8000108 <__gnu_thumb1_case_shi>
 8002e0e:	0016      	.short	0x0016
 8002e10:	fff6001f 	.word	0xfff6001f
 8002e14:	fff6fff6 	.word	0xfff6fff6
 8002e18:	001ffff6 	.word	0x001ffff6
 8002e1c:	fff6fff6 	.word	0xfff6fff6
 8002e20:	fff6fff6 	.word	0xfff6fff6
 8002e24:	003600a3 	.word	0x003600a3
 8002e28:	fff60083 	.word	0xfff60083
 8002e2c:	00b4fff6 	.word	0x00b4fff6
 8002e30:	0036fff6 	.word	0x0036fff6
 8002e34:	fff6fff6 	.word	0xfff6fff6
 8002e38:	0087      	.short	0x0087
 8002e3a:	0026      	movs	r6, r4
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	3642      	adds	r6, #66	; 0x42
 8002e40:	1d11      	adds	r1, r2, #4
 8002e42:	6019      	str	r1, [r3, #0]
 8002e44:	6813      	ldr	r3, [r2, #0]
 8002e46:	7033      	strb	r3, [r6, #0]
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0a2      	b.n	8002f92 <_printf_i+0x1c6>
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	6809      	ldr	r1, [r1, #0]
 8002e50:	1d02      	adds	r2, r0, #4
 8002e52:	060d      	lsls	r5, r1, #24
 8002e54:	d50b      	bpl.n	8002e6e <_printf_i+0xa2>
 8002e56:	6805      	ldr	r5, [r0, #0]
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	2d00      	cmp	r5, #0
 8002e5c:	da03      	bge.n	8002e66 <_printf_i+0x9a>
 8002e5e:	232d      	movs	r3, #45	; 0x2d
 8002e60:	9a04      	ldr	r2, [sp, #16]
 8002e62:	426d      	negs	r5, r5
 8002e64:	7013      	strb	r3, [r2, #0]
 8002e66:	4b5f      	ldr	r3, [pc, #380]	; (8002fe4 <_printf_i+0x218>)
 8002e68:	270a      	movs	r7, #10
 8002e6a:	9303      	str	r3, [sp, #12]
 8002e6c:	e01b      	b.n	8002ea6 <_printf_i+0xda>
 8002e6e:	6805      	ldr	r5, [r0, #0]
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	0649      	lsls	r1, r1, #25
 8002e74:	d5f1      	bpl.n	8002e5a <_printf_i+0x8e>
 8002e76:	b22d      	sxth	r5, r5
 8002e78:	e7ef      	b.n	8002e5a <_printf_i+0x8e>
 8002e7a:	680d      	ldr	r5, [r1, #0]
 8002e7c:	6819      	ldr	r1, [r3, #0]
 8002e7e:	1d08      	adds	r0, r1, #4
 8002e80:	6018      	str	r0, [r3, #0]
 8002e82:	062e      	lsls	r6, r5, #24
 8002e84:	d501      	bpl.n	8002e8a <_printf_i+0xbe>
 8002e86:	680d      	ldr	r5, [r1, #0]
 8002e88:	e003      	b.n	8002e92 <_printf_i+0xc6>
 8002e8a:	066d      	lsls	r5, r5, #25
 8002e8c:	d5fb      	bpl.n	8002e86 <_printf_i+0xba>
 8002e8e:	680d      	ldr	r5, [r1, #0]
 8002e90:	b2ad      	uxth	r5, r5
 8002e92:	4b54      	ldr	r3, [pc, #336]	; (8002fe4 <_printf_i+0x218>)
 8002e94:	2708      	movs	r7, #8
 8002e96:	9303      	str	r3, [sp, #12]
 8002e98:	2a6f      	cmp	r2, #111	; 0x6f
 8002e9a:	d000      	beq.n	8002e9e <_printf_i+0xd2>
 8002e9c:	3702      	adds	r7, #2
 8002e9e:	0023      	movs	r3, r4
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	3343      	adds	r3, #67	; 0x43
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	6863      	ldr	r3, [r4, #4]
 8002ea8:	60a3      	str	r3, [r4, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	db03      	blt.n	8002eb6 <_printf_i+0xea>
 8002eae:	2104      	movs	r1, #4
 8002eb0:	6822      	ldr	r2, [r4, #0]
 8002eb2:	438a      	bics	r2, r1
 8002eb4:	6022      	str	r2, [r4, #0]
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d102      	bne.n	8002ec0 <_printf_i+0xf4>
 8002eba:	9e04      	ldr	r6, [sp, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00c      	beq.n	8002eda <_printf_i+0x10e>
 8002ec0:	9e04      	ldr	r6, [sp, #16]
 8002ec2:	0028      	movs	r0, r5
 8002ec4:	0039      	movs	r1, r7
 8002ec6:	f7fd f9af 	bl	8000228 <__aeabi_uidivmod>
 8002eca:	9b03      	ldr	r3, [sp, #12]
 8002ecc:	3e01      	subs	r6, #1
 8002ece:	5c5b      	ldrb	r3, [r3, r1]
 8002ed0:	7033      	strb	r3, [r6, #0]
 8002ed2:	002b      	movs	r3, r5
 8002ed4:	0005      	movs	r5, r0
 8002ed6:	429f      	cmp	r7, r3
 8002ed8:	d9f3      	bls.n	8002ec2 <_printf_i+0xf6>
 8002eda:	2f08      	cmp	r7, #8
 8002edc:	d109      	bne.n	8002ef2 <_printf_i+0x126>
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	07db      	lsls	r3, r3, #31
 8002ee2:	d506      	bpl.n	8002ef2 <_printf_i+0x126>
 8002ee4:	6862      	ldr	r2, [r4, #4]
 8002ee6:	6923      	ldr	r3, [r4, #16]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	dc02      	bgt.n	8002ef2 <_printf_i+0x126>
 8002eec:	2330      	movs	r3, #48	; 0x30
 8002eee:	3e01      	subs	r6, #1
 8002ef0:	7033      	strb	r3, [r6, #0]
 8002ef2:	9b04      	ldr	r3, [sp, #16]
 8002ef4:	1b9b      	subs	r3, r3, r6
 8002ef6:	6123      	str	r3, [r4, #16]
 8002ef8:	9b07      	ldr	r3, [sp, #28]
 8002efa:	0021      	movs	r1, r4
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	9805      	ldr	r0, [sp, #20]
 8002f00:	9b06      	ldr	r3, [sp, #24]
 8002f02:	aa09      	add	r2, sp, #36	; 0x24
 8002f04:	f7ff fef2 	bl	8002cec <_printf_common>
 8002f08:	3001      	adds	r0, #1
 8002f0a:	d147      	bne.n	8002f9c <_printf_i+0x1d0>
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	4240      	negs	r0, r0
 8002f10:	b00b      	add	sp, #44	; 0x2c
 8002f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f14:	2220      	movs	r2, #32
 8002f16:	6809      	ldr	r1, [r1, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	6022      	str	r2, [r4, #0]
 8002f1c:	2278      	movs	r2, #120	; 0x78
 8002f1e:	4932      	ldr	r1, [pc, #200]	; (8002fe8 <_printf_i+0x21c>)
 8002f20:	9103      	str	r1, [sp, #12]
 8002f22:	0021      	movs	r1, r4
 8002f24:	3145      	adds	r1, #69	; 0x45
 8002f26:	700a      	strb	r2, [r1, #0]
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	6822      	ldr	r2, [r4, #0]
 8002f2c:	c920      	ldmia	r1!, {r5}
 8002f2e:	0610      	lsls	r0, r2, #24
 8002f30:	d402      	bmi.n	8002f38 <_printf_i+0x16c>
 8002f32:	0650      	lsls	r0, r2, #25
 8002f34:	d500      	bpl.n	8002f38 <_printf_i+0x16c>
 8002f36:	b2ad      	uxth	r5, r5
 8002f38:	6019      	str	r1, [r3, #0]
 8002f3a:	07d3      	lsls	r3, r2, #31
 8002f3c:	d502      	bpl.n	8002f44 <_printf_i+0x178>
 8002f3e:	2320      	movs	r3, #32
 8002f40:	4313      	orrs	r3, r2
 8002f42:	6023      	str	r3, [r4, #0]
 8002f44:	2710      	movs	r7, #16
 8002f46:	2d00      	cmp	r5, #0
 8002f48:	d1a9      	bne.n	8002e9e <_printf_i+0xd2>
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	4393      	bics	r3, r2
 8002f50:	6023      	str	r3, [r4, #0]
 8002f52:	e7a4      	b.n	8002e9e <_printf_i+0xd2>
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	680d      	ldr	r5, [r1, #0]
 8002f58:	1d10      	adds	r0, r2, #4
 8002f5a:	6949      	ldr	r1, [r1, #20]
 8002f5c:	6018      	str	r0, [r3, #0]
 8002f5e:	6813      	ldr	r3, [r2, #0]
 8002f60:	062e      	lsls	r6, r5, #24
 8002f62:	d501      	bpl.n	8002f68 <_printf_i+0x19c>
 8002f64:	6019      	str	r1, [r3, #0]
 8002f66:	e002      	b.n	8002f6e <_printf_i+0x1a2>
 8002f68:	066d      	lsls	r5, r5, #25
 8002f6a:	d5fb      	bpl.n	8002f64 <_printf_i+0x198>
 8002f6c:	8019      	strh	r1, [r3, #0]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	9e04      	ldr	r6, [sp, #16]
 8002f72:	6123      	str	r3, [r4, #16]
 8002f74:	e7c0      	b.n	8002ef8 <_printf_i+0x12c>
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	1d11      	adds	r1, r2, #4
 8002f7a:	6019      	str	r1, [r3, #0]
 8002f7c:	6816      	ldr	r6, [r2, #0]
 8002f7e:	2100      	movs	r1, #0
 8002f80:	0030      	movs	r0, r6
 8002f82:	6862      	ldr	r2, [r4, #4]
 8002f84:	f000 f858 	bl	8003038 <memchr>
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	d001      	beq.n	8002f90 <_printf_i+0x1c4>
 8002f8c:	1b80      	subs	r0, r0, r6
 8002f8e:	6060      	str	r0, [r4, #4]
 8002f90:	6863      	ldr	r3, [r4, #4]
 8002f92:	6123      	str	r3, [r4, #16]
 8002f94:	2300      	movs	r3, #0
 8002f96:	9a04      	ldr	r2, [sp, #16]
 8002f98:	7013      	strb	r3, [r2, #0]
 8002f9a:	e7ad      	b.n	8002ef8 <_printf_i+0x12c>
 8002f9c:	0032      	movs	r2, r6
 8002f9e:	6923      	ldr	r3, [r4, #16]
 8002fa0:	9906      	ldr	r1, [sp, #24]
 8002fa2:	9805      	ldr	r0, [sp, #20]
 8002fa4:	9d07      	ldr	r5, [sp, #28]
 8002fa6:	47a8      	blx	r5
 8002fa8:	3001      	adds	r0, #1
 8002faa:	d0af      	beq.n	8002f0c <_printf_i+0x140>
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	079b      	lsls	r3, r3, #30
 8002fb0:	d415      	bmi.n	8002fde <_printf_i+0x212>
 8002fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fb4:	68e0      	ldr	r0, [r4, #12]
 8002fb6:	4298      	cmp	r0, r3
 8002fb8:	daaa      	bge.n	8002f10 <_printf_i+0x144>
 8002fba:	0018      	movs	r0, r3
 8002fbc:	e7a8      	b.n	8002f10 <_printf_i+0x144>
 8002fbe:	0022      	movs	r2, r4
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	9906      	ldr	r1, [sp, #24]
 8002fc4:	9805      	ldr	r0, [sp, #20]
 8002fc6:	9e07      	ldr	r6, [sp, #28]
 8002fc8:	3219      	adds	r2, #25
 8002fca:	47b0      	blx	r6
 8002fcc:	3001      	adds	r0, #1
 8002fce:	d09d      	beq.n	8002f0c <_printf_i+0x140>
 8002fd0:	3501      	adds	r5, #1
 8002fd2:	68e3      	ldr	r3, [r4, #12]
 8002fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	42ab      	cmp	r3, r5
 8002fda:	dcf0      	bgt.n	8002fbe <_printf_i+0x1f2>
 8002fdc:	e7e9      	b.n	8002fb2 <_printf_i+0x1e6>
 8002fde:	2500      	movs	r5, #0
 8002fe0:	e7f7      	b.n	8002fd2 <_printf_i+0x206>
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	08003216 	.word	0x08003216
 8002fe8:	08003227 	.word	0x08003227

08002fec <memmove>:
 8002fec:	b510      	push	{r4, lr}
 8002fee:	4288      	cmp	r0, r1
 8002ff0:	d902      	bls.n	8002ff8 <memmove+0xc>
 8002ff2:	188b      	adds	r3, r1, r2
 8002ff4:	4298      	cmp	r0, r3
 8002ff6:	d303      	bcc.n	8003000 <memmove+0x14>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e007      	b.n	800300c <memmove+0x20>
 8002ffc:	5c8b      	ldrb	r3, [r1, r2]
 8002ffe:	5483      	strb	r3, [r0, r2]
 8003000:	3a01      	subs	r2, #1
 8003002:	d2fb      	bcs.n	8002ffc <memmove+0x10>
 8003004:	bd10      	pop	{r4, pc}
 8003006:	5ccc      	ldrb	r4, [r1, r3]
 8003008:	54c4      	strb	r4, [r0, r3]
 800300a:	3301      	adds	r3, #1
 800300c:	429a      	cmp	r2, r3
 800300e:	d1fa      	bne.n	8003006 <memmove+0x1a>
 8003010:	e7f8      	b.n	8003004 <memmove+0x18>
	...

08003014 <_sbrk_r>:
 8003014:	2300      	movs	r3, #0
 8003016:	b570      	push	{r4, r5, r6, lr}
 8003018:	4d06      	ldr	r5, [pc, #24]	; (8003034 <_sbrk_r+0x20>)
 800301a:	0004      	movs	r4, r0
 800301c:	0008      	movs	r0, r1
 800301e:	602b      	str	r3, [r5, #0]
 8003020:	f7fe fc5a 	bl	80018d8 <_sbrk>
 8003024:	1c43      	adds	r3, r0, #1
 8003026:	d103      	bne.n	8003030 <_sbrk_r+0x1c>
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d000      	beq.n	8003030 <_sbrk_r+0x1c>
 800302e:	6023      	str	r3, [r4, #0]
 8003030:	bd70      	pop	{r4, r5, r6, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	200001b4 	.word	0x200001b4

08003038 <memchr>:
 8003038:	b2c9      	uxtb	r1, r1
 800303a:	1882      	adds	r2, r0, r2
 800303c:	4290      	cmp	r0, r2
 800303e:	d101      	bne.n	8003044 <memchr+0xc>
 8003040:	2000      	movs	r0, #0
 8003042:	4770      	bx	lr
 8003044:	7803      	ldrb	r3, [r0, #0]
 8003046:	428b      	cmp	r3, r1
 8003048:	d0fb      	beq.n	8003042 <memchr+0xa>
 800304a:	3001      	adds	r0, #1
 800304c:	e7f6      	b.n	800303c <memchr+0x4>

0800304e <memcpy>:
 800304e:	2300      	movs	r3, #0
 8003050:	b510      	push	{r4, lr}
 8003052:	429a      	cmp	r2, r3
 8003054:	d100      	bne.n	8003058 <memcpy+0xa>
 8003056:	bd10      	pop	{r4, pc}
 8003058:	5ccc      	ldrb	r4, [r1, r3]
 800305a:	54c4      	strb	r4, [r0, r3]
 800305c:	3301      	adds	r3, #1
 800305e:	e7f8      	b.n	8003052 <memcpy+0x4>

08003060 <_realloc_r>:
 8003060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003062:	0007      	movs	r7, r0
 8003064:	000e      	movs	r6, r1
 8003066:	0014      	movs	r4, r2
 8003068:	2900      	cmp	r1, #0
 800306a:	d105      	bne.n	8003078 <_realloc_r+0x18>
 800306c:	0011      	movs	r1, r2
 800306e:	f7ff fc49 	bl	8002904 <_malloc_r>
 8003072:	0005      	movs	r5, r0
 8003074:	0028      	movs	r0, r5
 8003076:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003078:	2a00      	cmp	r2, #0
 800307a:	d103      	bne.n	8003084 <_realloc_r+0x24>
 800307c:	f7ff fbd6 	bl	800282c <_free_r>
 8003080:	0025      	movs	r5, r4
 8003082:	e7f7      	b.n	8003074 <_realloc_r+0x14>
 8003084:	f000 f81b 	bl	80030be <_malloc_usable_size_r>
 8003088:	9001      	str	r0, [sp, #4]
 800308a:	4284      	cmp	r4, r0
 800308c:	d803      	bhi.n	8003096 <_realloc_r+0x36>
 800308e:	0035      	movs	r5, r6
 8003090:	0843      	lsrs	r3, r0, #1
 8003092:	42a3      	cmp	r3, r4
 8003094:	d3ee      	bcc.n	8003074 <_realloc_r+0x14>
 8003096:	0021      	movs	r1, r4
 8003098:	0038      	movs	r0, r7
 800309a:	f7ff fc33 	bl	8002904 <_malloc_r>
 800309e:	1e05      	subs	r5, r0, #0
 80030a0:	d0e8      	beq.n	8003074 <_realloc_r+0x14>
 80030a2:	9b01      	ldr	r3, [sp, #4]
 80030a4:	0022      	movs	r2, r4
 80030a6:	429c      	cmp	r4, r3
 80030a8:	d900      	bls.n	80030ac <_realloc_r+0x4c>
 80030aa:	001a      	movs	r2, r3
 80030ac:	0031      	movs	r1, r6
 80030ae:	0028      	movs	r0, r5
 80030b0:	f7ff ffcd 	bl	800304e <memcpy>
 80030b4:	0031      	movs	r1, r6
 80030b6:	0038      	movs	r0, r7
 80030b8:	f7ff fbb8 	bl	800282c <_free_r>
 80030bc:	e7da      	b.n	8003074 <_realloc_r+0x14>

080030be <_malloc_usable_size_r>:
 80030be:	1f0b      	subs	r3, r1, #4
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	1f18      	subs	r0, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	da01      	bge.n	80030cc <_malloc_usable_size_r+0xe>
 80030c8:	580b      	ldr	r3, [r1, r0]
 80030ca:	18c0      	adds	r0, r0, r3
 80030cc:	4770      	bx	lr
	...

080030d0 <_init>:
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d6:	bc08      	pop	{r3}
 80030d8:	469e      	mov	lr, r3
 80030da:	4770      	bx	lr

080030dc <_fini>:
 80030dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e2:	bc08      	pop	{r3}
 80030e4:	469e      	mov	lr, r3
 80030e6:	4770      	bx	lr
